openapi: 3.0.2
info:
  title: Tator REST API
  version: v1
paths:
  /rest/Affiliations/{organization}:
    get:
      operationId: GetAffiliationList
      description: 'Get affiliation list.


        Affiliations specify a permission level of a user to an organization. There
        are currently

        two cumulative permission levels. `Member` can only view an organization and
        not change

        any data. `Admin` can modify an organization, add members to an organization,
        and create

        new projects under the organization''s account.

        '
      parameters:
      - name: organization
        in: path
        required: true
        description: A unique integer identifying an organization.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of affiliation list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Affiliation'
      tags:
      - Tator
    post:
      operationId: CreateAffiliation
      description: 'Create affiliation.


        Affiliations specify a permission level of a user to an organization. There
        are currently

        two cumulative permission levels. `Member` can only view an organization and
        not change

        any data. `Admin` can modify an organization, add members to an organization,
        and create

        new projects under the organization''s account.

        '
      parameters:
      - name: organization
        in: path
        required: true
        description: A unique integer identifying an organization.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AffiliationSpec'
            example:
              user: 1
              permission: Admin
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of affiliation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/Affiliation/{id}:
    get:
      operationId: GetAffiliation
      description: 'Get affiliation.


        Affiliations specify a permission level of a user to an organization. There
        are currently

        two cumulative permission levels. `Member` can only view an organization and
        not change

        any data. `Admin` can modify an organization, add members to an organization,
        and create

        new projects under the organization''s account.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a affiliation.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of affiliation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Affiliation'
      tags:
      - Tator
    patch:
      operationId: UpdateAffiliation
      description: 'Update affiliation.


        Affiliations specify a permission level of a user to an organization. There
        are currently

        two cumulative permission levels. `Member` can only view an organization and
        not change

        any data. `Admin` can modify an organization, add members to an organization,
        and create

        new projects under the organization''s account.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a affiliation.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AffiliationUpdate'
            example:
              permission: View Only
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of affiliation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteAffiliation
      description: 'Delete affiliation.


        Affiliations specify a permission level of a user to an organization. There
        are currently

        two cumulative permission levels. `Member` can only view an organization and
        not change

        any data. `Admin` can modify an organization, add members to an organization,
        and create

        new projects under the organization''s account.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a affiliation.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of affiliation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Algorithms/{project}:
    get:
      operationId: GetAlgorithmList
      description: 'Get registered algorithms.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of registered algorithms.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Algorithm'
      tags:
      - Tator
    post:
      operationId: RegisterAlgorithm
      description: 'Register an algorithm argo workflow.


        This endpoint replicates the algorithm registration through the admin portal.

        The provided manifest file must have been uploaded and saved by the

        SaveAlgorithmManifest endpoint. This endpoint will respond with an error if

        one of the following conditions occur:


        - Provided workflow name is not unique (across projects)

        - Not all the required fields are present

        - There are syntax errors with the given manifest file

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgorithmSpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of registered algorithm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/Algorithm/{id}:
    get:
      operationId: GetAlgorithm
      description: Get registered algorithm workflow
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a registered algorithm workflow.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of algorithm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Algorithm'
      tags:
      - Tator
    patch:
      operationId: UpdateAlgorithm
      description: Updated registered algorithm workflow
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a registered algorithm workflow.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgorithmSpec'
            example:
              name: New unique name
              manifest: Server path to new manifest file
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteAlgorithm
      description: Delete registered algorithm workflow
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a registered algorithm workflow.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of registered algorithm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Analyses/{project}:
    get:
      operationId: GetAnalysisList
      description: 'Get analysis.


        Analysis objects are used to display information about filtered media lists

        and/or annotations on the project detail page of the web UI. Currently only

        counting analysis is supported.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      responses:
        '404':
          description: Failure to find project with given ID.
        '400':
          description: Bad request.
        '200':
          description: Successful retrieval of analyses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Analysis'
      tags:
      - Tator
    post:
      operationId: CreateAnalysis
      description: 'Create analysis.


        Analysis objects are used to display information about filtered media lists

        and/or annotations on the project detail page of the web UI. Currently only

        counting analysis is supported.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisSpec'
            examples:
              count_all:
                summary: Count all entities of the given type
                value:
                  name: Boxes
                  data_query: _meta:1
              count_filter:
                summary: Count all entities with confidence > 0.5
                value:
                  name: High confidence boxes
                  data_query: Confidence:>0.5
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of analysis.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/Analysis/{id}:
    get:
      operationId: GetAnalysis
      description: Get analysis record
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an analysis record.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of analysis record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analysis'
      tags:
      - Tator
    patch:
      operationId: UpdateAnalysis
      description: Update analysis record
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an analysis record.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisSpec'
            example:
              name: New name
              data_query: New string for analysis record
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of analysis record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteAnalysis
      description: Delete analysis record
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an analysis record.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of analysis record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/AudioFiles/{id}:
    get:
      operationId: GetAudioFileList
      description: "Get audio file list.\n\nAudio files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying audio. One or more audio files can be used to reference\nthe\
        \ audio role in a `Media` object. The file itself must first be uploaded to\
        \ a URL retrieved\nfrom the `UploadInfo` endpoint, and the returned object\
        \ key \nshould be specified in the audio file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: false
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - audio
          default: audio
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of audio file list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AudioDefinition'
      tags:
      - Tator
    post:
      operationId: CreateAudioFile
      description: "Create audio file.\n\nAudio files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying audio. One or more audio files can be used to reference\nthe\
        \ audio role in a `Media` object. The file itself must first be uploaded to\
        \ a URL retrieved\nfrom the `UploadInfo` endpoint, and the returned object\
        \ key \nshould be specified in the audio file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: false
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - audio
          default: audio
      - name: index
        in: query
        required: false
        description: Insertion index. Must be less than size of current list of audio
          files for the specified `role`. If omitted, the audio file will be appended
          to the end of the list.
        schema:
          type: integer
          minimum: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioDefinition'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of audio file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/AudioFile/{id}:
    get:
      operationId: GetAudioFile
      description: "Get audio file.\n\nAudio files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying audio. One or more audio files can be used to reference\nthe\
        \ audio role in a `Media` object. The file itself must first be uploaded to\
        \ a URL retrieved\nfrom the `UploadInfo` endpoint, and the returned object\
        \ key \nshould be specified in the audio file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: false
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - audio
          default: audio
      - name: index
        in: query
        required: true
        description: Index of object. Must be less than size of current list of audio
          files for the specified `role`.
        schema:
          type: integer
          minimum: 0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of audio file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioDefinition'
      tags:
      - Tator
    patch:
      operationId: UpdateAudioFile
      description: "Update audio file.\n\nAudio files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying audio. One or more audio files can be used to reference\nthe\
        \ audio role in a `Media` object. The file itself must first be uploaded to\
        \ a URL retrieved\nfrom the `UploadInfo` endpoint, and the returned object\
        \ key \nshould be specified in the audio file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: false
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - audio
          default: audio
      - name: index
        in: query
        required: true
        description: Index of object. Must be less than size of current list of audio
          files for the specified `role`.
        schema:
          type: integer
          minimum: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioDefinition'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of audio file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteAudioFile
      description: "Delete audio file.\n\nAudio files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying audio. One or more audio files can be used to reference\nthe\
        \ audio role in a `Media` object. The file itself must first be uploaded to\
        \ a URL retrieved\nfrom the `UploadInfo` endpoint, and the returned object\
        \ key \nshould be specified in the audio file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: false
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - audio
          default: audio
      - name: index
        in: query
        required: true
        description: Index of object. Must be less than size of current list of audio
          files for the specified `role`.
        schema:
          type: integer
          minimum: 0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of audio file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Bookmarks/{project}:
    get:
      operationId: GetBookmarkList
      description: 'Get bookmark list.


        Bookmarks are saved links that can be used to mark videos/frames of interest.

        They are scoped to a project and user, so if a user requests Bookmarks for
        a

        project they will only receive the Bookmarks created by them.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the bookmark to filter on.
        schema:
          type: string
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of bookmark list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bookmark'
      tags:
      - Tator
    post:
      operationId: CreateBookmark
      description: 'Create bookmark.


        Bookmarks are saved links that can be used to mark videos/frames of interest.

        They are scoped to a project and user, so if a user requests Bookmarks for
        a

        project they will only receive the Bookmarks created by them.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the bookmark to filter on.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkSpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of bookmark.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/Bookmark/{id}:
    get:
      operationId: GetBookmark
      description: 'Get bookmark.


        Bookmarks are saved links that can be used to mark videos/frames of interest.

        They are scoped to a project and user, so if a user requests Bookmarks for
        a

        project they will only receive the Bookmarks created by them.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a bookmark.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of bookmark.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
      tags:
      - Tator
    patch:
      operationId: UpdateBookmark
      description: 'Update bookmark.


        Bookmarks are saved links that can be used to mark videos/frames of interest.

        They are scoped to a project and user, so if a user requests Bookmarks for
        a

        project they will only receive the Bookmarks created by them.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a bookmark.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkUpdate'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of bookmark.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteBookmark
      description: 'Delete bookmark.


        Bookmarks are saved links that can be used to mark videos/frames of interest.

        They are scoped to a project and user, so if a user requests Bookmarks for
        a

        project they will only receive the Bookmarks created by them.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a bookmark.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of bookmark.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Favorites/{project}:
    get:
      operationId: GetFavoriteList
      description: "Get favorite list.\n\nFavorites are saved annotation values to\
        \ help speed up annotation. They are \nscoped to a project and user, so if\
        \ a user requests Favorites for a project\nthey will only receive the Favorites\
        \ created by them.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of favorite list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Favorite'
      tags:
      - Tator
    post:
      operationId: CreateFavorite
      description: "Create favorite.\n\nFavorites are saved annotation values to help\
        \ speed up annotation. They are \nscoped to a project and user, so if a user\
        \ requests Favorites for a project\nthey will only receive the Favorites created\
        \ by them.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteSpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of favorite.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/Favorite/{id}:
    get:
      operationId: GetFavorite
      description: "Get favorite.\n\nFavorites are saved annotation values to help\
        \ speed up annotation. They are \nscoped to a project and user, so if a user\
        \ requests Favorites for a project\nthey will only receive the Favorites created\
        \ by them.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a favorite.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of favorite.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
      tags:
      - Tator
    patch:
      operationId: UpdateFavorite
      description: "Update favorite.\n\nFavorites are saved annotation values to help\
        \ speed up annotation. They are \nscoped to a project and user, so if a user\
        \ requests Favorites for a project\nthey will only receive the Favorites created\
        \ by them.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a favorite.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteUpdate'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of favorite.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteFavorite
      description: "Delete favorite.\n\nFavorites are saved annotation values to help\
        \ speed up annotation. They are \nscoped to a project and user, so if a user\
        \ requests Favorites for a project\nthey will only receive the Favorites created\
        \ by them.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a favorite.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of favorite.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/GetFrame/{id}:
    get:
      operationId: GetFrame
      description: 'Get frame(s) from a video.


        Facility to get a frame(jpg/png) of a given video frame, returns a square
        tile of

        frames based on the input parameter.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: frames
        in: query
        required: false
        description: Comma-seperated list of frames to capture.
        explode: false
        schema:
          type: array
          items:
            type: integer
            minimum: 0
          maxLength: 32
          default:
          - 0
        example:
        - 0
        - 100
        - 200
      - name: tile
        in: query
        required: false
        description: wxh, if not supplied is made as squarish as possible.
        schema:
          type: string
      - name: roi
        in: query
        required: false
        description: w:h:x:y, optionally crop each frame to a given roi in relative
          coordinates.
        schema:
          type: string
      - name: animate
        in: query
        required: false
        description: If not tiling, animate each frame at a given fps in a gif.
        schema:
          type: integer
          minimum: 0
          maximum: 15
      - name: quality
        in: query
        required: false
        description: Source resolution to use (default to highest quality)
        schema:
          type: integer
          minimum: 0
      responses:
        '404':
          description: Not found.
          content:
            image/*:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request.
          content:
            image/*:
              schema:
                type: string
                format: binary
        '200':
          description: Successful retrieval of frame image.
          content:
            image/*:
              schema:
                type: string
                format: binary
      tags:
      - Tator
  /rest/GetClip/{id}:
    get:
      operationId: GetClip
      description: 'Get video clip.


        Facility to get a clip from the server. Returns a temporary file object that
        expires in 24 hours.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: frameRanges
        in: query
        required: true
        description: Comma-seperated list of frame ranges to capture.
        explode: false
        schema:
          type: array
          items:
            type: string
        example:
        - 0:30
        - 50:90
      - name: quality
        in: query
        required: false
        description: Source resolution to use (default to highest quality)
        schema:
          type: integer
          minimum: 0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of video clip.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoClip'
      tags:
      - Tator
  /rest/ImageFiles/{id}:
    get:
      operationId: GetImageFileList
      description: "Get image file list.\n\nImage files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying image. One or more image files can be used to reference\nthumbnails,\
        \ thumbnail GIFs, or images in a `Media` object. The file itself must first\
        \ be \nuploaded to a URL retrieved from the `UploadInfo` endpoint, and the\
        \ returned object key \nshould be specified in the image file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: true
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - image
          - thumbnail
          - thumbnail_gif
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of image file list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageDefinition'
      tags:
      - Tator
    post:
      operationId: CreateImageFile
      description: "Create image file.\n\nImage files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying image. One or more image files can be used to reference\nthumbnails,\
        \ thumbnail GIFs, or images in a `Media` object. The file itself must first\
        \ be \nuploaded to a URL retrieved from the `UploadInfo` endpoint, and the\
        \ returned object key \nshould be specified in the image file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: true
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - image
          - thumbnail
          - thumbnail_gif
      - name: index
        in: query
        required: false
        description: Insertion index. Must be less than size of current list of images
          for the specified `role`. If omitted, the image file will be appended to
          the end of the list.
        schema:
          type: integer
          minimum: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageDefinition'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of image file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/ImageFile/{id}:
    get:
      operationId: GetImageFile
      description: "Get image file.\n\nImage files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying image. One or more image files can be used to reference\nthumbnails,\
        \ thumbnail GIFs, or images in a `Media` object. The file itself must first\
        \ be \nuploaded to a URL retrieved from the `UploadInfo` endpoint, and the\
        \ returned object key \nshould be specified in the image file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: true
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - image
          - thumbnail
          - thumbnail_gif
      - name: index
        in: query
        required: true
        description: Index of object. Must be less than size of current list of images
          for the specified `role`.
        schema:
          type: integer
          minimum: 0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of image file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDefinition'
      tags:
      - Tator
    patch:
      operationId: UpdateImageFile
      description: "Update image file.\n\nImage files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying image. One or more image files can be used to reference\nthumbnails,\
        \ thumbnail GIFs, or images in a `Media` object. The file itself must first\
        \ be \nuploaded to a URL retrieved from the `UploadInfo` endpoint, and the\
        \ returned object key \nshould be specified in the image file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: true
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - image
          - thumbnail
          - thumbnail_gif
      - name: index
        in: query
        required: true
        description: Index of object. Must be less than size of current list of images
          for the specified `role`.
        schema:
          type: integer
          minimum: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageDefinition'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of image file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteImageFile
      description: "Delete image file.\n\nImage files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying image. One or more image files can be used to reference\nthumbnails,\
        \ thumbnail GIFs, or images in a `Media` object. The file itself must first\
        \ be \nuploaded to a URL retrieved from the `UploadInfo` endpoint, and the\
        \ returned object key \nshould be specified in the image file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: true
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - image
          - thumbnail
          - thumbnail_gif
      - name: index
        in: query
        required: true
        description: Index of object. Must be less than size of current list of images
          for the specified `role`.
        schema:
          type: integer
          minimum: 0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of image file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Jobs/{project}:
    get:
      operationId: GetJobList
      description: 'Get background job list.


        Algorithms and transcodes create argo workflows that are annotated with two

        uuid1 strings, one identifying the run and the other identifying the group.

        Jobs that are submitted together have the same group id, but each workflow

        has a unique run id.



        This method allows the user to status for a list of jobs in a project

        that were created by either the `AlgorithmLaunch` or `Transcode` endpoints.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: gid
        in: query
        required: false
        description: A UUID string identifying a group of jobs.
        schema:
          type: string
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of job list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
      tags:
      - Tator
    delete:
      operationId: DeleteJobList
      description: 'Delete background job list.


        Algorithms and transcodes create argo workflows that are annotated with two

        uuid1 strings, one identifying the run and the other identifying the group.

        Jobs that are submitted together have the same group id, but each workflow

        has a unique run id.



        This method allows the user to batch delete a list of jobs that were created

        by either the `AlgorithmLaunch` or `Transcode` endpoints.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: gid
        in: query
        required: false
        description: A UUID string identifying a group of jobs.
        schema:
          type: string
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of job list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Job/{uid}:
    get:
      operationId: GetJob
      description: 'Get background job.


        Algorithms and transcodes create argo workflows that are annotated with two

        uuid1 strings, one identifying the run and the other identifying the group.

        Jobs that are submitted together have the same group id, but each workflow

        has a unique run id.



        This method allows the user to get a job''s status using the `uid` returned

        by either the `AlgorithmLaunch` or `Transcode` endpoints.

        '
      parameters:
      - name: uid
        in: path
        required: true
        description: A uuid1 string identifying to single Job.
        schema:
          type: string
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
      tags:
      - Tator
    delete:
      operationId: DeleteJob
      description: 'Delete background job.


        Algorithms and transcodes create argo workflows that are annotated with two

        uuid1 strings, one identifying the run and the other identifying the group.

        Jobs that are submitted together have the same group id, but each workflow

        has a unique run id.



        This method allows the user to cancel a job using the `uid` returned

        by either the `AlgorithmLaunch` or `Transcode` endpoints.

        '
      parameters:
      - name: uid
        in: path
        required: true
        description: A uuid1 string identifying to single Job.
        schema:
          type: string
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Leaves/Suggestion/{ancestor}/{project}:
    get:
      operationId: LeafSuggestion
      description: 'Get list of autocomplete suggestions.


        This endpoint is compatible with <a href=https://github.com/kraaden/autocomplete>

        devbridge suggestion format</a>. It performs a glob search on leaf objects
        in the project.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: ancestor
        in: path
        required: true
        description: Get descendents of a leaf element (inclusive), by path (i.e.
          ITIS.Animalia).
        schema:
          type: string
      - name: minLevel
        in: query
        required: false
        description: Integer specifying level of results that may be returned. For
          example, 2 refers to grandchildren of the level specified by the `ancestor`
          parameter.
        schema:
          type: integer
      - name: query
        in: query
        required: true
        description: String to search for matching names.
        schema:
          type: string
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of suggestions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeafSuggestion'
      tags:
      - Tator
  /rest/Leaves/{project}:
    get:
      operationId: GetLeafList
      description: 'Get leaf list.


        Leaves are used to define label hierarchies that can be used for autocompletion

        of string attribute types. Leaves are a type of entity in Tator, meaning they

        can be described by user-defined attributes.



        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a leaf type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the leaf element.
        schema:
          type: string
      - name: depth
        in: query
        required: false
        description: Get a specific tree depth. Root node depth is 0.
        schema:
          type: integer
      - name: leaf_id
        in: query
        required: false
        description: Comma-separated list of leaf IDs.
        schema:
          type: array
          items:
            type: integer
            nullable: false
          nullable: false
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of leaf list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Leaf'
      tags:
      - Tator
    post:
      operationId: CreateLeafList
      description: "Create leaf list.\n\nLeaves are used to define label hierarchies\
        \ that can be used for autocompletion\nof string attribute types. Leaves are\
        \ a type of entity in Tator, meaning they\ncan be described by user-defined\
        \ attributes.\n\n\nThis method does a bulk create on a list of `LeafSpec`\
        \ objects. A \nmaximum of 500 leaves may be created in one request.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LeafSpec'
              maxItems: 500
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of leaf.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListResponse'
      tags:
      - Tator
    put:
      operationId: GetLeafListById
      description: 'Get leaf list by ID.


        Leaves are used to define label hierarchies that can be used for autocompletion

        of string attribute types. Leaves are a type of entity in Tator, meaning they

        can be described by user-defined attributes.



        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a leaf type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the leaf element.
        schema:
          type: string
      - name: depth
        in: query
        required: false
        description: Get a specific tree depth. Root node depth is 0.
        schema:
          type: integer
      - name: leaf_id
        in: query
        required: false
        description: Comma-separated list of leaf IDs.
        schema:
          type: array
          items:
            type: integer
            nullable: false
          nullable: false
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeafIdQuery'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of leaf list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Leaf'
      tags:
      - Tator
    patch:
      operationId: UpdateLeafList
      description: "Update leaf list.\n\nLeaves are used to define label hierarchies\
        \ that can be used for autocompletion\nof string attribute types. Leaves are\
        \ a type of entity in Tator, meaning they\ncan be described by user-defined\
        \ attributes.\n\n\nThis method does a bulk update on all leaves matching a\
        \ query. Only \nuser-defined attributes may be bulk updated.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a leaf type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the leaf element.
        schema:
          type: string
      - name: depth
        in: query
        required: false
        description: Get a specific tree depth. Root node depth is 0.
        schema:
          type: integer
      - name: leaf_id
        in: query
        required: false
        description: Comma-separated list of leaf IDs.
        schema:
          type: array
          items:
            type: integer
            nullable: false
          nullable: false
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeBulkUpdate'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of leaf list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteLeafList
      description: "Delete leaf list.\n\nLeaves are used to define label hierarchies\
        \ that can be used for autocompletion\nof string attribute types. Leaves are\
        \ a type of entity in Tator, meaning they\ncan be described by user-defined\
        \ attributes.\n\n\nThis method performs a bulk delete on all leaves matching\
        \ a query. It is \nrecommended to use a GET request first to check what is\
        \ being deleted.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a leaf type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the leaf element.
        schema:
          type: string
      - name: depth
        in: query
        required: false
        description: Get a specific tree depth. Root node depth is 0.
        schema:
          type: integer
      - name: leaf_id
        in: query
        required: false
        description: Comma-separated list of leaf IDs.
        schema:
          type: array
          items:
            type: integer
            nullable: false
          nullable: false
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of leaf list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Leaf/{id}:
    get:
      operationId: GetLeaf
      description: 'Get leaf.


        Leaves are used to define label hierarchies that can be used for autocompletion

        of string attribute types. Leaves are a type of entity in Tator, meaning they

        can be described by user-defined attributes.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a leaf.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of leaf.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leaf'
      tags:
      - Tator
    patch:
      operationId: UpdateLeaf
      description: 'Update leaf.


        Leaves are used to define label hierarchies that can be used for autocompletion

        of string attribute types. Leaves are a type of entity in Tator, meaning they

        can be described by user-defined attributes.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a leaf.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeafUpdate'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of leaf.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteLeaf
      description: 'Delete leaf.


        Leaves are used to define label hierarchies that can be used for autocompletion

        of string attribute types. Leaves are a type of entity in Tator, meaning they

        can be described by user-defined attributes.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a leaf.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of leaf.
      tags:
      - Tator
  /rest/LeafCount/{project}:
    get:
      operationId: GetLeafCount
      description: 'Retrieve count of leaves in a leaf list.


        This endpoint accepts the same query parameters as a GET request to the `Leaves`
        endpoint,

        but only returns the number of leaves.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a leaf type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the leaf element.
        schema:
          type: string
      - name: depth
        in: query
        required: false
        description: Get a specific tree depth. Root node depth is 0.
        schema:
          type: integer
      - name: leaf_id
        in: query
        required: false
        description: Comma-separated list of leaf IDs.
        schema:
          type: array
          items:
            type: integer
            nullable: false
          nullable: false
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Number of leaves in the list corresponding to query.
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
      tags:
      - Tator
  /rest/LeafTypes/{project}:
    get:
      operationId: GetLeafTypeList
      description: 'Get leaf type list.


        A leaf type is the metadata definition object for a leaf. It includes

        name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of leaf type list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeafType'
      tags:
      - Tator
    post:
      operationId: CreateLeafType
      description: 'Create leaf type.


        A leaf type is the metadata definition object for a leaf. It includes

        name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeafTypeSpec'
            example:
              name: My leaf type
              attribute_types:
              - name: My Boolean
                dtype: bool
                default: false
              - name: My Integer
                dtype: int
                default: 0
                minimum: -1
                maximum: 1
              - name: My Float
                dtype: float
                default: 0.0
                minimum: -1.0
                maximum: 1.0
              - name: My Enumeration
                dtype: enum
                default: a
                choices:
                - a
                - b
                - c
                labels:
                - a
                - b
                - c
              - name: My String
                dtype: string
                default: '---'
                autocomplete:
                  serviceUrl: https://www.example.com/suggestion
              - name: My String (Text Area)
                dtype: string
                default: '---'
                style: long_string
              - name: My Datetime
                dtype: datetime
                use_current: true
              - name: My Geoposition
                dtype: geopos
                default:
                - -179.0
                - 90.0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of leaf type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/LeafType/{id}:
    get:
      operationId: GetLeafType
      description: 'Get leaf type.


        A leaf type is the metadata definition object for a leaf. It includes

        name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an leaf type.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of leaf type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeafType'
      tags:
      - Tator
    patch:
      operationId: UpdateLeafType
      description: 'Update leaf type.


        A leaf type is the metadata definition object for a leaf. It includes

        name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an leaf type.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeafTypeUpdate'
            example:
              name: New name
              description: New description
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of leaf type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteLeafType
      description: 'Delete leaf type.


        A leaf type is the metadata definition object for a leaf. It includes

        name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an leaf type.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of leaf type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Localizations/{project}:
    get:
      operationId: GetLocalizationList
      description: "Get localization list.\n\nLocalizations are shape annotations\
        \ drawn on a video or image. Available shapes (`dtype`) are \nbox, line, or\
        \ dot. Each shape is parameterized by a different subset of data members:\n\
        - `box` uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n\
        - `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n\n\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Comma-separated list of media IDs.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a annotation type.
        schema:
          type: integer
      - name: version
        in: query
        required: false
        explode: false
        description: List of integers representing versions to fetch
        schema:
          type: array
          items:
            type: integer
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      - name: excludeParents
        in: query
        required: false
        description: If a clone is present, do not send parent. This parameter will
          cause an exception if an Elasticsearch query is triggered and pagination
          parameters (start or stop) are included.
        schema:
          type: integer
          minimum: 0
          maximum: 1
          default: 0
          nullable: false
      - name: frame
        in: query
        description: Frame number of this localization if it is in a video.
        schema:
          type: integer
          minimum: 0
        required: false
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of localization list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Localization'
      tags:
      - Tator
    post:
      operationId: CreateLocalizationList
      description: "Create localiazation list.\n\nLocalizations are shape annotations\
        \ drawn on a video or image. Available shapes (`dtype`) are \nbox, line, or\
        \ dot. Each shape is parameterized by a different subset of data members:\n\
        - `box` uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n\
        - `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n\n\nThis method\
        \ does a bulk create on a list of `LocalizationSpec` objects. A \nmaximum\
        \ of 500 localizations may be created in one request.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LocalizationSpec'
              maxItems: 500
            examples:
              box:
                summary: Single box localization
                value:
                - media_id: 1
                  type: 1
                  x: 0.1
                  y: 0.2
                  width: 0.3
                  height: 0.4
                  frame: 1000
                  My First Attribute: value1
                  My Second Attribute: value2
              boxes:
                summary: Many box localizations
                value:
                - media_id: 1
                  type: 1
                  x: 0.1
                  y: 0.2
                  width: 0.3
                  height: 0.4
                  frame: 100
                  My First Attribute: value1
                  My Second Attribute: value2
                - media_id: 1
                  type: 1
                  x: 0.1
                  y: 0.2
                  width: 0.3
                  height: 0.4
                  frame: 1000
                  My First Attribute: value1
                  My Second Attribute: value2
              line:
                summary: Single line localization
                value:
                - media_id: 1
                  type: 2
                  x: 0.1
                  y: 0.2
                  u: 0.3
                  v: 0.4
                  frame: 1000
                  My First Attribute: value1
                  My Second Attribute: value2
              lines:
                summary: Many line localizations
                value:
                - media_id: 1
                  type: 2
                  x: 0.1
                  y: 0.2
                  u: 0.3
                  v: 0.4
                  frame: 100
                  My First Attribute: value1
                  My Second Attribute: value2
                - x: 0.1
                  y: 0.2
                  u: 0.3
                  v: 0.4
                  frame: 1000
                  My First Attribute: value1
                  My Second Attribute: value2
              dot:
                summary: Single dot localization
                value:
                - media_id: 1
                  type: 1
                  x: 0.1
                  y: 0.2
                  frame: 1000
                  My First Attribute: value1
                  My Second Attribute: value2
              dots:
                summary: Many dot localizations
                value:
                - media_id: 1
                  type: 1
                  x: 0.1
                  y: 0.2
                  frame: 100
                  My First Attribute: value1
                  My Second Attribute: value2
                - x: 0.1
                  y: 0.2
                  frame: 1000
                  My First Attribute: value1
                  My Second Attribute: value2
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of localization(s).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListResponse'
      tags:
      - Tator
    put:
      operationId: GetLocalizationListById
      description: "Get localization list by ID.\n\nLocalizations are shape annotations\
        \ drawn on a video or image. Available shapes (`dtype`) are \nbox, line, or\
        \ dot. Each shape is parameterized by a different subset of data members:\n\
        - `box` uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n\
        - `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n\n\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Comma-separated list of media IDs.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a annotation type.
        schema:
          type: integer
      - name: version
        in: query
        required: false
        explode: false
        description: List of integers representing versions to fetch
        schema:
          type: array
          items:
            type: integer
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      - name: excludeParents
        in: query
        required: false
        description: If a clone is present, do not send parent. This parameter will
          cause an exception if an Elasticsearch query is triggered and pagination
          parameters (start or stop) are included.
        schema:
          type: integer
          minimum: 0
          maximum: 1
          default: 0
          nullable: false
      - name: frame
        in: query
        description: Frame number of this localization if it is in a video.
        schema:
          type: integer
          minimum: 0
        required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalizationIdQuery'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of localization list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Localization'
      tags:
      - Tator
    patch:
      operationId: UpdateLocalizationList
      description: "Update localiazation list.\n\nLocalizations are shape annotations\
        \ drawn on a video or image. Available shapes (`dtype`) are \nbox, line, or\
        \ dot. Each shape is parameterized by a different subset of data members:\n\
        - `box` uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n\
        - `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n\n\nThis method\
        \ does a bulk update on all localizations matching a query. Only \nuser-defined\
        \ attributes may be bulk updated.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Comma-separated list of media IDs.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a annotation type.
        schema:
          type: integer
      - name: version
        in: query
        required: false
        explode: false
        description: List of integers representing versions to fetch
        schema:
          type: array
          items:
            type: integer
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      - name: excludeParents
        in: query
        required: false
        description: If a clone is present, do not send parent. This parameter will
          cause an exception if an Elasticsearch query is triggered and pagination
          parameters (start or stop) are included.
        schema:
          type: integer
          minimum: 0
          maximum: 1
          default: 0
          nullable: false
      - name: frame
        in: query
        description: Frame number of this localization if it is in a video.
        schema:
          type: integer
          minimum: 0
        required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeBulkUpdate'
            examples:
              single:
                summary: Update Species attribute of many localizations
                value:
                  attributes:
                    Species: Tuna
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of localization list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteLocalizationList
      description: "Delete localiazation list.\n\nLocalizations are shape annotations\
        \ drawn on a video or image. Available shapes (`dtype`) are \nbox, line, or\
        \ dot. Each shape is parameterized by a different subset of data members:\n\
        - `box` uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n\
        - `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n\n\nThis method\
        \ performs a bulk delete on all localizations matching a query. It is \nrecommended\
        \ to use a GET request first to check what is being deleted.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Comma-separated list of media IDs.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a annotation type.
        schema:
          type: integer
      - name: version
        in: query
        required: false
        explode: false
        description: List of integers representing versions to fetch
        schema:
          type: array
          items:
            type: integer
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      - name: excludeParents
        in: query
        required: false
        description: If a clone is present, do not send parent. This parameter will
          cause an exception if an Elasticsearch query is triggered and pagination
          parameters (start or stop) are included.
        schema:
          type: integer
          minimum: 0
          maximum: 1
          default: 0
          nullable: false
      - name: frame
        in: query
        description: Frame number of this localization if it is in a video.
        schema:
          type: integer
          minimum: 0
        required: false
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of localization list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Localization/{id}:
    get:
      operationId: GetLocalization
      description: "Get localization.\n\nLocalizations are shape annotations drawn\
        \ on a video or image. Available shapes (`dtype`) are \nbox, line, or dot.\
        \ Each shape is parameterized by a different subset of data members:\n- `box`\
        \ uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n-\
        \ `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a localization.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of localization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Localization'
      tags:
      - Tator
    patch:
      operationId: UpdateLocalization
      description: "Update localization.\n\nLocalizations are shape annotations drawn\
        \ on a video or image. Available shapes (`dtype`) are \nbox, line, or dot.\
        \ Each shape is parameterized by a different subset of data members:\n- `box`\
        \ uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n-\
        \ `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a localization.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalizationUpdate'
            example:
              x: 0.25
              y: 0.25
              width: 0.25
              height: 0.25
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of localization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteLocalization
      description: "Delete localization.\n\nLocalizations are shape annotations drawn\
        \ on a video or image. Available shapes (`dtype`) are \nbox, line, or dot.\
        \ Each shape is parameterized by a different subset of data members:\n- `box`\
        \ uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n-\
        \ `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a localization.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of localization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/LocalizationCount/{project}:
    get:
      operationId: GetLocalizationCount
      description: 'Retrieve count of localizations in a localization list.


        This endpoint accepts the same query parameters as a GET request to the `Localizations`
        endpoint,

        but only returns the number of localizations.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Comma-separated list of media IDs.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a annotation type.
        schema:
          type: integer
      - name: version
        in: query
        required: false
        explode: false
        description: List of integers representing versions to fetch
        schema:
          type: array
          items:
            type: integer
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Number of localizations in the list corresponding to query.
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
      tags:
      - Tator
  /rest/LocalizationTypes/{project}:
    get:
      operationId: GetLocalizationTypeList
      description: 'Get localization type list.


        A localization type is the metadata definition object for a localization.
        It includes

        shape, name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: List of unique integers identifying a media.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Deprecated. Use `LocalizationType` endpoint to retrieve individual
          localization type by ID.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of localization type list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocalizationType'
      tags:
      - Tator
    post:
      operationId: CreateLocalizationType
      description: 'Create localization type.


        A localization type is the metadata definition object for a localization.
        It includes

        shape, name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalizationTypeSpec'
            example:
              name: My localization type
              dtype: box
              media_types:
              - 1
              attribute_types:
              - name: My Boolean
                dtype: bool
                default: false
              - name: My Integer
                dtype: int
                default: 0
                minimum: -1
                maximum: 1
              - name: My Float
                dtype: float
                default: 0.0
                minimum: -1.0
                maximum: 1.0
              - name: My Enumeration
                dtype: enum
                default: a
                choices:
                - a
                - b
                - c
                labels:
                - a
                - b
                - c
              - name: My String
                dtype: string
                default: '---'
                autocomplete:
                  serviceUrl: https://www.example.com/suggestion
              - name: My String (Text Area)
                dtype: string
                default: '---'
                style: long_string
              - name: My Datetime
                dtype: datetime
                use_current: true
              - name: My Geoposition
                dtype: geopos
                default:
                - -179.0
                - 90.0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of localization type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/LocalizationType/{id}:
    get:
      operationId: GetLocalizationType
      description: 'Get localization type.


        A localization type is the metadata definition object for a localization.
        It includes

        shape, name, description, and may have any number of user-defined attribute

        types associated with it.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a localization type.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of localization type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizationType'
      tags:
      - Tator
    patch:
      operationId: UpdateLocalizationType
      description: 'Update localization type.


        A localization type is the metadata definition object for a localization.
        It includes

        shape, name, description, and may have any number of user-defined attribute

        types associated with it.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a localization type.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalizationTypeUpdate'
            example:
              name: New name
              description: New description
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of localization type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteLocalizationType
      description: 'Delete localization type.


        A localization type is the metadata definition object for a localization.
        It includes

        shape, name, description, and may have any number of user-defined attribute

        types associated with it.



        Note that this will also delete any localizations associated with

        the localization type.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a localization type.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of localization type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/LocalizationGraphic/{id}:
    get:
      operationId: GetLocalizationGraphic
      description: 'Get localization graphic from a media object.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a localization.
        schema:
          type: integer
      - name: force_scale
        in: query
        required: false
        description: 'Size of final image to return. This forces scaling the image.
          Default is the localization size and margins define the image size. Example:
          100x100 '
        schema:
          type: string
      - name: use_default_margins
        in: query
        required: false
        description: 'Use default margins for localization types.  Default margins
          (x,y pixels) - dot: (10,10) line:  (10,10) box: (0,0) '
        schema:
          type: boolean
          default: true
      - name: margin_x
        in: query
        required: false
        description: 'Pixel margin to apply to the height of the localization when
          generating the image. Valid only if use_default_margins is false. '
        schema:
          type: integer
      - name: margin_y
        in: query
        required: false
        description: 'Pixel margin to apply to the width of the localization when
          generating the image. Valid only if use_default_margins is false. '
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            image/*:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request.
          content:
            image/*:
              schema:
                type: string
                format: binary
        '200':
          description: Successful retrieval of localization graphic.
          content:
            image/*:
              schema:
                type: string
                format: binary
      tags:
      - Tator
  /rest/Medias/{project}:
    get:
      operationId: GetMediaList
      description: 'Get media list.


        A media may be an image or a video. Media are a type of entity in Tator,

        meaning they can be described by user defined attributes.



        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: List of integers identifying media.
        explode: false
        schema:
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
      - name: type
        in: query
        required: false
        description: Unique integer identifying media type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the media to filter on.
        schema:
          type: string
      - name: section
        in: query
        required: false
        description: Unique integer identifying a media section.
        schema:
          type: integer
      - name: dtype
        in: query
        required: false
        description: Data type of the files, either image or video.
        schema:
          type: string
          enum:
          - image
          - video
      - name: md5
        in: query
        required: false
        description: MD5 sum of the media file.
        schema:
          type: string
      - name: gid
        in: query
        required: false
        description: Upload group ID of the media file.
        schema:
          type: string
      - name: uid
        in: query
        required: false
        description: Upload unique ID of the media file.
        schema:
          type: string
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      - name: presigned
        in: query
        required: false
        description: If given, all `path` fields in `media_files` will be replaced
          with presigned URLs that can be downloaded without authentication. The value
          is the expiration time of the URLs in seconds.
        schema:
          type: integer
          minimum: 1
          maximum: 86400
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of media list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Media'
      tags:
      - Tator
    post:
      operationId: CreateMedia
      description: "Create media.\n\nA media may be an image or a video. Media are\
        \ a type of entity in Tator,\nmeaning they can be described by user defined\
        \ attributes.\n\n\nThis method creates a `Media` object in the database. For\
        \ images, the \nmedia must already be uploaded and an upload URL must be provided,\
        \ as\nwell as the group and job IDs associated with the upload. For videos,\n\
        it is recommended to use the `Transcode` endpoint, which will create\nthe\
        \ media object itself. This method is only needed for local \ntranscodes.\
        \ In that case, it will create an empty Media object;\nthumbnails, streaming,\
        \ and archival videos must be subsequently uploaded \nand saved via the `Media`\
        \ PATCH method.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaSpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of media.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
    put:
      operationId: GetMediaListById
      description: 'Get media list by ID.


        A media may be an image or a video. Media are a type of entity in Tator,

        meaning they can be described by user defined attributes.



        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: List of integers identifying media.
        explode: false
        schema:
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
      - name: type
        in: query
        required: false
        description: Unique integer identifying media type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the media to filter on.
        schema:
          type: string
      - name: section
        in: query
        required: false
        description: Unique integer identifying a media section.
        schema:
          type: integer
      - name: dtype
        in: query
        required: false
        description: Data type of the files, either image or video.
        schema:
          type: string
          enum:
          - image
          - video
      - name: md5
        in: query
        required: false
        description: MD5 sum of the media file.
        schema:
          type: string
      - name: gid
        in: query
        required: false
        description: Upload group ID of the media file.
        schema:
          type: string
      - name: uid
        in: query
        required: false
        description: Upload unique ID of the media file.
        schema:
          type: string
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      - name: presigned
        in: query
        required: false
        description: If given, all `path` fields in `media_files` will be replaced
          with presigned URLs that can be downloaded without authentication. The value
          is the expiration time of the URLs in seconds.
        schema:
          type: integer
          minimum: 1
          maximum: 86400
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaIdQuery'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of media list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Media'
      tags:
      - Tator
    patch:
      operationId: UpdateMediaList
      description: "Update media list.\n\nA media may be an image or a video. Media\
        \ are a type of entity in Tator,\nmeaning they can be described by user defined\
        \ attributes.\n\n\nThis method does a bulk update on all media matching a\
        \ query. Only \nuser-defined attributes may be bulk updated.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: List of integers identifying media.
        explode: false
        schema:
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
      - name: type
        in: query
        required: false
        description: Unique integer identifying media type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the media to filter on.
        schema:
          type: string
      - name: section
        in: query
        required: false
        description: Unique integer identifying a media section.
        schema:
          type: integer
      - name: dtype
        in: query
        required: false
        description: Data type of the files, either image or video.
        schema:
          type: string
          enum:
          - image
          - video
      - name: md5
        in: query
        required: false
        description: MD5 sum of the media file.
        schema:
          type: string
      - name: gid
        in: query
        required: false
        description: Upload group ID of the media file.
        schema:
          type: string
      - name: uid
        in: query
        required: false
        description: Upload unique ID of the media file.
        schema:
          type: string
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeBulkUpdate'
            examples:
              single:
                summary: Update Species attribute of many images
                value:
                  attributes:
                    Species: Tuna
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of media list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteMediaList
      description: "Delete media list.\n\nA media may be an image or a video. Media\
        \ are a type of entity in Tator,\nmeaning they can be described by user defined\
        \ attributes.\n\n\nThis method performs a bulk delete on all media matching\
        \ a query. It is \nrecommended to use a GET request first to check what is\
        \ being deleted.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: List of integers identifying media.
        explode: false
        schema:
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
      - name: type
        in: query
        required: false
        description: Unique integer identifying media type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the media to filter on.
        schema:
          type: string
      - name: section
        in: query
        required: false
        description: Unique integer identifying a media section.
        schema:
          type: integer
      - name: dtype
        in: query
        required: false
        description: Data type of the files, either image or video.
        schema:
          type: string
          enum:
          - image
          - video
      - name: md5
        in: query
        required: false
        description: MD5 sum of the media file.
        schema:
          type: string
      - name: gid
        in: query
        required: false
        description: Upload group ID of the media file.
        schema:
          type: string
      - name: uid
        in: query
        required: false
        description: Upload unique ID of the media file.
        schema:
          type: string
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of media list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Media/{id}:
    get:
      operationId: GetMedia
      description: 'Get media.


        A media may be an image or a video. Media are a type of entity in Tator,

        meaning they can be described by user defined attributes.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media.
        schema:
          type: integer
      - name: presigned
        in: query
        required: false
        description: If given, all `path` fields in `media_files` will be replaced
          with presigned URLs that can be downloaded without authentication. The value
          is the expiration time of the URLs in seconds.
        schema:
          type: integer
          minimum: 1
          maximum: 86400
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of media.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
      tags:
      - Tator
    patch:
      operationId: UpdateMedia
      description: 'Update media.


        A media may be an image or a video. Media are a type of entity in Tator,

        meaning they can be described by user defined attributes.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaUpdate'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of media.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteMedia
      description: 'Delete media.


        A media may be an image or a video. Media are a type of entity in Tator,

        meaning they can be described by user defined attributes.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of media.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/MediaCount/{project}:
    get:
      operationId: GetMediaCount
      description: 'Retrieve count of media in a media list.


        This endpoint accepts the same query parameters as a GET request to the `Medias`
        endpoint,

        but only returns the number of media.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: List of integers identifying media.
        explode: false
        schema:
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
      - name: type
        in: query
        required: false
        description: Unique integer identifying media type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the media to filter on.
        schema:
          type: string
      - name: section
        in: query
        required: false
        description: Unique integer identifying a media section.
        schema:
          type: integer
      - name: dtype
        in: query
        required: false
        description: Data type of the files, either image or video.
        schema:
          type: string
          enum:
          - image
          - video
      - name: md5
        in: query
        required: false
        description: MD5 sum of the media file.
        schema:
          type: string
      - name: gid
        in: query
        required: false
        description: Upload group ID of the media file.
        schema:
          type: string
      - name: uid
        in: query
        required: false
        description: Upload unique ID of the media file.
        schema:
          type: string
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Number of media in the list corresponding to query.
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
      tags:
      - Tator
  /rest/MediaNext/{id}:
    get:
      operationId: GetMediaNext
      description: 'Retrieve ID of next media in a media list.


        This endpoint accepts the same query parameters as a GET request to the `Medias`
        endpoint,

        but only returns the next media ID from the media passed as a path parameter.
        This allows

        iteration through a media list without serializing the entire list, which
        may be large.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: List of integers identifying media.
        explode: false
        schema:
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
      - name: type
        in: query
        required: false
        description: Unique integer identifying media type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the media to filter on.
        schema:
          type: string
      - name: section
        in: query
        required: false
        description: Unique integer identifying a media section.
        schema:
          type: integer
      - name: dtype
        in: query
        required: false
        description: Data type of the files, either image or video.
        schema:
          type: string
          enum:
          - image
          - video
      - name: md5
        in: query
        required: false
        description: MD5 sum of the media file.
        schema:
          type: string
      - name: gid
        in: query
        required: false
        description: Upload group ID of the media file.
        schema:
          type: string
      - name: uid
        in: query
        required: false
        description: Upload unique ID of the media file.
        schema:
          type: string
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: ID of next media in the list corresponding to query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaNext'
      tags:
      - Tator
  /rest/MediaPrev/{id}:
    get:
      operationId: GetMediaPrev
      description: "Retrieve ID of previous media in a media list.\n\nThis endpoint\
        \ accepts the same query parameters as a GET request to the `Medias` endpoint,\n\
        but only returns the previous media ID from the media passed as a path parameter.\
        \ This \nallows iteration through a media list without serializing the entire\
        \ list, which may be \nlarge.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: List of integers identifying media.
        explode: false
        schema:
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
      - name: type
        in: query
        required: false
        description: Unique integer identifying media type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the media to filter on.
        schema:
          type: string
      - name: section
        in: query
        required: false
        description: Unique integer identifying a media section.
        schema:
          type: integer
      - name: dtype
        in: query
        required: false
        description: Data type of the files, either image or video.
        schema:
          type: string
          enum:
          - image
          - video
      - name: md5
        in: query
        required: false
        description: MD5 sum of the media file.
        schema:
          type: string
      - name: gid
        in: query
        required: false
        description: Upload group ID of the media file.
        schema:
          type: string
      - name: uid
        in: query
        required: false
        description: Upload unique ID of the media file.
        schema:
          type: string
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: ID of previous media in the list corresponding to query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaPrev'
      tags:
      - Tator
  /rest/MediaStats/{project}:
    get:
      operationId: GetMediaStats
      description: 'Retrieve count, download size, total size, and duration of a media
        list.


        This endpoint accepts the same query parameters as a GET request to the `Medias`
        endpoint,

        but only returns statistics about the media.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: List of integers identifying media.
        explode: false
        schema:
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
      - name: type
        in: query
        required: false
        description: Unique integer identifying media type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the media to filter on.
        schema:
          type: string
      - name: section
        in: query
        required: false
        description: Unique integer identifying a media section.
        schema:
          type: integer
      - name: dtype
        in: query
        required: false
        description: Data type of the files, either image or video.
        schema:
          type: string
          enum:
          - image
          - video
      - name: md5
        in: query
        required: false
        description: MD5 sum of the media file.
        schema:
          type: string
      - name: gid
        in: query
        required: false
        description: Upload group ID of the media file.
        schema:
          type: string
      - name: uid
        in: query
        required: false
        description: Upload unique ID of the media file.
        schema:
          type: string
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Statistics corresponding to media list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaStats'
      tags:
      - Tator
  /rest/MediaTypes/{project}:
    get:
      operationId: GetMediaTypeList
      description: 'Get media type list.


        A media type is the metadata definition object for media. It includes file
        format,

        name, description, and may have any number of user defined attribute

        types associated with it.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of media type list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MediaType'
      tags:
      - Tator
    post:
      operationId: CreateMediaType
      description: 'Create media type.


        A media type is the metadata definition object for media. It includes file
        format,

        name, description, and may have any number of user defined attribute

        types associated with it.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaTypeSpec'
            example:
              name: My media type
              dtype: video
              attribute_types:
              - name: My Boolean
                dtype: bool
                default: false
              - name: My Integer
                dtype: int
                default: 0
                minimum: -1
                maximum: 1
              - name: My Float
                dtype: float
                default: 0.0
                minimum: -1.0
                maximum: 1.0
              - name: My Enumeration
                dtype: enum
                default: a
                choices:
                - a
                - b
                - c
                labels:
                - a
                - b
                - c
              - name: My String
                dtype: string
                default: '---'
                autocomplete:
                  serviceUrl: https://www.example.com/suggestion
              - name: My String (Text Area)
                dtype: string
                default: '---'
                style: long_string
              - name: My Datetime
                dtype: datetime
                use_current: true
              - name: My Geoposition
                dtype: geopos
                default:
                - -179.0
                - 90.0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/MediaType/{id}:
    get:
      operationId: GetMediaType
      description: 'Get media type.


        A media type is the metadata definition object for media. It includes file
        format,

        name, description, and may have any number of user defined attribute

        types associated with it.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an media type.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaType'
      tags:
      - Tator
    patch:
      operationId: UpdateMediaType
      description: 'Update media type.


        A media type is the metadata definition object for media. It includes file
        format,

        name, description, and may have any number of user defined attribute

        types associated with it.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an media type.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaTypeUpdate'
            example:
              name: New name
              description: New description
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteMediaType
      description: 'Delete media type.


        A media type is the metadata definition object for media. It includes file
        format,

        name, description, and may have any number of user defined attribute

        types associated with it.



        Note that this will also delete any media associated with the media type.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an media type.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Memberships/{project}:
    get:
      operationId: GetMembershipList
      description: "Get membership list.\n\nMemberships specify a permission level\
        \ of a user to a project. There are currently\nfive cumulative permission\
        \ levels:\n- `View Only` can only view a project and not change any data.\n\
        - `Can Edit` can create, modify, and delete annotations.\n- `Can Transfer`\
        \ can upload and download media.\n- `Can Execute` can launch algorithm workflows.\n\
        - `Full Control` can change project settings, including inviting new members,\
        \ project name, and\n   project metadata schema.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of membership list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Membership'
      tags:
      - Tator
    post:
      operationId: CreateMembership
      description: "Create membership.\n\nMemberships specify a permission level of\
        \ a user to a project. There are currently\nfive cumulative permission levels:\n\
        - `View Only` can only view a project and not change any data.\n- `Can Edit`\
        \ can create, modify, and delete annotations.\n- `Can Transfer` can upload\
        \ and download media.\n- `Can Execute` can launch algorithm workflows.\n-\
        \ `Full Control` can change project settings, including inviting new members,\
        \ project name, and\n   project metadata schema.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipSpec'
            example:
              user: 1
              permission: Full Control
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of membership.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/Membership/{id}:
    get:
      operationId: GetMembership
      description: "Get membership.\n\nMemberships specify a permission level of a\
        \ user to a project. There are currently\nfive cumulative permission levels:\n\
        - `View Only` can only view a project and not change any data.\n- `Can Edit`\
        \ can create, modify, and delete annotations.\n- `Can Transfer` can upload\
        \ and download media.\n- `Can Execute` can launch algorithm workflows.\n-\
        \ `Full Control` can change project settings, including inviting new members,\
        \ project name, and\n   project metadata schema.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a membership.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of membership.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
      tags:
      - Tator
    patch:
      operationId: UpdateMembership
      description: "Update membership.\n\nMemberships specify a permission level of\
        \ a user to a project. There are currently\nfive cumulative permission levels:\n\
        - `View Only` can only view a project and not change any data.\n- `Can Edit`\
        \ can create, modify, and delete annotations.\n- `Can Transfer` can upload\
        \ and download media.\n- `Can Execute` can launch algorithm workflows.\n-\
        \ `Full Control` can change project settings, including inviting new members,\
        \ project name, and\n   project metadata schema.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a membership.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipUpdate'
            example:
              permission: View Only
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of membership.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteMembership
      description: "Delete membership.\n\nMemberships specify a permission level of\
        \ a user to a project. There are currently\nfive cumulative permission levels:\n\
        - `View Only` can only view a project and not change any data.\n- `Can Edit`\
        \ can create, modify, and delete annotations.\n- `Can Transfer` can upload\
        \ and download media.\n- `Can Execute` can launch algorithm workflows.\n-\
        \ `Full Control` can change project settings, including inviting new members,\
        \ project name, and\n   project metadata schema.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a membership.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of membership.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Organizations:
    get:
      operationId: GetOrganizationList
      description: 'Get organization list.


        Organizations are used to represent groups of users. Multiple projects may
        be owned by

        an organization, and users may be members of multiple organizations.



        Returns all organizations that a user is affiliated with.'
      parameters: []
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of organization list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
      tags:
      - Tator
    post:
      operationId: CreateOrganization
      description: 'Create organization.


        Organizations are used to represent groups of users. Multiple projects may
        be owned by

        an organization, and users may be members of multiple organizations.



        '
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationSpec'
            example:
              name: My Organization
              summary: First organization
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of organization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/Organization/{id}:
    get:
      operationId: GetOrganization
      description: 'Get organization.


        Organizations are used to represent groups of users. Multiple projects may
        be owned by

        an organization, and users may be members of multiple organizations.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an organization.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of organization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      tags:
      - Tator
    patch:
      operationId: UpdateOrganization
      description: 'Update organization.


        Organizations are used to represent groups of users. Multiple projects may
        be owned by

        an organization, and users may be members of multiple organizations.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an organization.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationSpec'
            example:
              name: New name
              summary: New summary
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of organization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteOrganization
      description: 'Delete organization.


        Organizations are used to represent groups of users. Multiple projects may
        be owned by

        an organization, and users may be members of multiple organizations.



        Only organization owners may delete an organization.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying an organization.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of organization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Projects:
    get:
      operationId: GetProjectList
      description: 'Get project list.


        Projects are the object under which all data in Tator is grouped, including
        user

        access, metadata definitions, media, and annotations. Data does not cross
        boundaries

        between projects.



        Returns all projects that a user has access to.'
      parameters: []
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of project list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
      tags:
      - Tator
    post:
      operationId: CreateProject
      description: 'Create project.


        Projects are the object under which all data in Tator is grouped, including
        user

        access, metadata definitions, media, and annotations. Data does not cross
        boundaries

        between projects.



        '
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSpec'
            example:
              name: My Project
              summary: First project
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/Project/{id}:
    get:
      operationId: GetProject
      description: 'Get project.


        Projects are the object under which all data in Tator is grouped, including
        user

        access, metadata definitions, media, and annotations. Data does not cross
        boundaries

        between projects.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      tags:
      - Tator
    patch:
      operationId: UpdateProject
      description: 'Update project.


        Projects are the object under which all data in Tator is grouped, including
        user

        access, metadata definitions, media, and annotations. Data does not cross
        boundaries

        between projects.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
            example:
              name: New name
              summary: New summary
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteProject
      description: 'Delete project.


        Projects are the object under which all data in Tator is grouped, including
        user

        access, metadata definitions, media, and annotations. Data does not cross
        boundaries

        between projects.



        Only project owners may delete a project. Note that deleting a project

        will also delete all media and annotations within a project.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Sections/{project}:
    get:
      operationId: GetSectionList
      description: 'Get section list.


        Sections represent groups of media using saved queries. The queries can be
        in the form

        of a <a href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>lucene
        search string</a> or a list of <a href=https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html>boolean
        filter queries</a> applied to

        either media or child annotations of media.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the section.
        schema:
          type: string
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of sections.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Section'
      tags:
      - Tator
    post:
      operationId: CreateSection
      description: 'Create section.


        Sections represent groups of media using saved queries. The queries can be
        in the form

        of a <a href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>lucene
        search string</a> or a list of <a href=https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html>boolean
        filter queries</a> applied to

        either media or child annotations of media.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the section.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SectionSpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/Section/{id}:
    get:
      operationId: GetSection
      description: 'Get section.


        Sections represent groups of media using saved queries. The queries can be
        in the form

        of a <a href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>lucene
        search string</a> or a list of <a href=https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html>boolean
        filter queries</a> applied to

        either media or child annotations of media.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a section.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
      tags:
      - Tator
    patch:
      operationId: UpdateSection
      description: 'Update section.


        Sections represent groups of media using saved queries. The queries can be
        in the form

        of a <a href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>lucene
        search string</a> or a list of <a href=https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html>boolean
        filter queries</a> applied to

        either media or child annotations of media.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a section.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SectionUpdate'
            example:
              name: New unique name
              lucene_string: Field:value*
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteSection
      description: 'Delete section.


        Sections represent groups of media using saved queries. The queries can be
        in the form

        of a <a href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>lucene
        search string</a> or a list of <a href=https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html>boolean
        filter queries</a> applied to

        either media or child annotations of media.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a section.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/SectionAnalysis/{project}:
    get:
      operationId: GetSectionAnalysis
      description: 'Retrieve analysis results for a media list.


        This endpoint uses objects created with the `Analysis` endpoint to perform
        analysis

        on filtered media lists.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Unique integer identifying a media. Use this to do analyis on
          a single file instead of sections.
        explode: false
        schema:
          type: array
          items:
            type: integer
            minimum: 1
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of section analysis.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionAnalysis'
      tags:
      - Tator
  /rest/States/{project}:
    get:
      operationId: GetStateList
      description: 'Get state list.


        A state is a description of a collection of other objects. The objects a state
        describes

        could be media (image or video), video frames, or localizations. A state referring

        to a collection of localizations is often referred to as a track. States are

        a type of entity in Tator, meaning they can be described by user defined attributes.



        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Comma-separated list of media IDs.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a annotation type.
        schema:
          type: integer
      - name: version
        in: query
        required: false
        explode: false
        description: List of integers representing versions to fetch
        schema:
          type: array
          items:
            type: integer
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of state list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/State'
      tags:
      - Tator
    post:
      operationId: CreateStateList
      description: "Create state list.\n\nA state is a description of a collection\
        \ of other objects. The objects a state describes\ncould be media (image or\
        \ video), video frames, or localizations. A state referring\nto a collection\
        \ of localizations is often referred to as a track. States are\na type of\
        \ entity in Tator, meaning they can be described by user defined attributes.\n\
        \n\nThis method does a bulk create on a list of `StateSpec` objects. A \n\
        maximum of 500 states may be created in one request.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StateSpec'
              maxItems: 500
            examples:
              frame:
                summary: Frame associated state
                value:
                - type: 1
                  media_ids:
                  - 1
                  frame: 1000
                  My First Attribute: value1
                  My Second Attribute: value2
              localization:
                summary: Localization associated state
                value:
                - type: 1
                  media_ids:
                  - 1
                  localization_ids:
                  - 1
                  - 5
                  - 10
                  My First Attribute: value1
                  My Second Attribute: value2
              media:
                summary: Media associated state
                value:
                - type: 1
                  media_ids:
                  - 1
                  - 5
                  - 10
                  My First Attribute: value1
                  My Second Attribute: value2
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of state(s).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListResponse'
      tags:
      - Tator
    put:
      operationId: GetStateListById
      description: 'Get state list by ID.


        A state is a description of a collection of other objects. The objects a state
        describes

        could be media (image or video), video frames, or localizations. A state referring

        to a collection of localizations is often referred to as a track. States are

        a type of entity in Tator, meaning they can be described by user defined attributes.



        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Comma-separated list of media IDs.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a annotation type.
        schema:
          type: integer
      - name: version
        in: query
        required: false
        explode: false
        description: List of integers representing versions to fetch
        schema:
          type: array
          items:
            type: integer
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalizationIdQuery'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of state list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/State'
      tags:
      - Tator
    patch:
      operationId: UpdateStateList
      description: "Update state list.\n\nA state is a description of a collection\
        \ of other objects. The objects a state describes\ncould be media (image or\
        \ video), video frames, or localizations. A state referring\nto a collection\
        \ of localizations is often referred to as a track. States are\na type of\
        \ entity in Tator, meaning they can be described by user defined attributes.\n\
        \n\nThis method does a bulk update on all states matching a query. Only \n\
        user-defined attributes may be bulk updated.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Comma-separated list of media IDs.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a annotation type.
        schema:
          type: integer
      - name: version
        in: query
        required: false
        explode: false
        description: List of integers representing versions to fetch
        schema:
          type: array
          items:
            type: integer
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeBulkUpdate'
            examples:
              single:
                summary: Update Species attribute of many states
                value:
                  attributes:
                    Species: Tuna
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of state list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteStateList
      description: "Delete state list.\n\nA state is a description of a collection\
        \ of other objects. The objects a state describes\ncould be media (image or\
        \ video), video frames, or localizations. A state referring\nto a collection\
        \ of localizations is often referred to as a track. States are\na type of\
        \ entity in Tator, meaning they can be described by user defined attributes.\n\
        \n\nThis method performs a bulk delete on all states matching a query. It\
        \ is \nrecommended to use a GET request first to check what is being deleted.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Comma-separated list of media IDs.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a annotation type.
        schema:
          type: integer
      - name: version
        in: query
        required: false
        explode: false
        description: List of integers representing versions to fetch
        schema:
          type: array
          items:
            type: integer
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of state list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/StateCount/{project}:
    get:
      operationId: GetStateCount
      description: 'Retrieve count of states in a state list.


        This endpoint accepts the same query parameters as a GET request to the `States`
        endpoint,

        but only returns the number of states.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Comma-separated list of media IDs.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Unique integer identifying a annotation type.
        schema:
          type: integer
      - name: version
        in: query
        required: false
        explode: false
        description: List of integers representing versions to fetch
        schema:
          type: array
          items:
            type: integer
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: integer
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Number of states in the list corresponding to query.
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
      tags:
      - Tator
  /rest/StateGraphic/{id}:
    get:
      operationId: GetStateGraphic
      description: " Get frame(s) of a given localization-associated state.\n\nUse\
        \ the mode argument to control whether it is an animated gif or a tiled jpg.\
        \ A maximum\nof 100 detections may be retrieved at once. Use the length and\
        \ offset parameters to \ncontrol which section of a state is retrieved.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a state.
        schema:
          type: integer
      - name: mode
        in: query
        required: false
        description: Whether to animate or tile.
        schema:
          type: string
          enum:
          - animate
          - tile
          default: animate
      - name: fps
        in: query
        required: false
        description: Frame rate if `mode` is `animate`.
        schema:
          type: number
          default: 2
      - name: forceScale
        in: query
        required: false
        description: wxh to force each tile prior to stich
        schema:
          type: string
          example: 512x512
          default: 224x224
          nullable: true
      - name: length
        in: query
        required: false
        description: Number of detections to extract.
        schema:
          type: integer
          example: 100
          default: 100
          maximum: 100
      - name: offset
        in: query
        required: false
        description: Index offset of detections to extract.
        schema:
          type: integer
          example: 0
          default: 0
      responses:
        '404':
          description: Not found.
          content:
            image/*:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request.
          content:
            image/*:
              schema:
                type: string
                format: binary
        '200':
          description: Successful retrieval of state graphic.
          content:
            image/*:
              schema:
                type: string
                format: binary
      tags:
      - Tator
  /rest/State/{id}:
    get:
      operationId: GetState
      description: 'Get state.


        A state is a description of a collection of other objects. The objects a state
        describes

        could be media (image or video), video frames, or localizations. A state referring

        to a collection of localizations is often referred to as a track. States are

        a type of entity in Tator, meaning they can be described by user defined attributes.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a state.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
      tags:
      - Tator
    patch:
      operationId: UpdateState
      description: 'Update state.


        A state is a description of a collection of other objects. The objects a state
        describes

        could be media (image or video), video frames, or localizations. A state referring

        to a collection of localizations is often referred to as a track. States are

        a type of entity in Tator, meaning they can be described by user defined attributes.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a state.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateUpdate'
            example:
              frame: 1001
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteState
      description: 'Delete state.


        A state is a description of a collection of other objects. The objects a state
        describes

        could be media (image or video), video frames, or localizations. A state referring

        to a collection of localizations is often referred to as a track. States are

        a type of entity in Tator, meaning they can be described by user defined attributes.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a state.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/StateTypes/{project}:
    get:
      operationId: GetStateTypeList
      description: 'Get state type list.


        A state type is the metadata definition object for a state. It includes association

        type, name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: List of unique integers identifying a media.
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: type
        in: query
        required: false
        description: Deprecated. Use `LocalizationType` endpoint to retrieve individual
          localization type by ID.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of state type list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StateType'
      tags:
      - Tator
    post:
      operationId: CreateStateType
      description: 'Create state type.


        A state type is the metadata definition object for a state. It includes association

        type, name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateTypeSpec'
            example:
              name: My state type
              association: Frame
              media_types:
              - 1
              attribute_types:
              - name: My Boolean
                dtype: bool
                default: false
              - name: My Integer
                dtype: int
                default: 0
                minimum: -1
                maximum: 1
              - name: My Float
                dtype: float
                default: 0.0
                minimum: -1.0
                maximum: 1.0
              - name: My Enumeration
                dtype: enum
                default: a
                choices:
                - a
                - b
                - c
                labels:
                - a
                - b
                - c
              - name: My String
                dtype: string
                default: '---'
                autocomplete:
                  serviceUrl: https://www.example.com/suggestion
              - name: My String (Text Area)
                dtype: string
                default: '---'
                style: long_string
              - name: My Datetime
                dtype: datetime
                use_current: true
              - name: My Geoposition
                dtype: geopos
                default:
                - -179.0
                - 90.0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of state type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/StateType/{id}:
    get:
      operationId: GetStateType
      description: 'Get state type.


        A state type is the metadata definition object for a state. It includes association

        type, name, description, and may have any number of user-defined attribute

        types associated with it.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a state type.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of state type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateType'
      tags:
      - Tator
    patch:
      operationId: UpdateStateType
      description: 'Update state type.


        A state type is the metadata definition object for a state. It includes association

        type, name, description, and may have any number of user-defined attribute

        types associated with it.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a state type.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateTypeUpdate'
            example:
              name: New name
              description: New description
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of state type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteStateType
      description: 'Delete state type.


        A state type is the metadata definition object for a state. It includes association

        type, name, description, and may have any number of user-defined attribute

        types associated with it.



        Note that this will also delete any states associated with the state type.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a state type.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of state type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/TemporaryFiles/{project}:
    get:
      operationId: GetTemporaryFileList
      description: 'Get temporary file list.


        Temporary files are files stored server side for a defined duration.



        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: expired
        in: query
        required: false
        description: If greater than 0 will return only expired files
        explode: false
        schema:
          type: integer
          default: 0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of temporary file list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TemporaryFile'
      tags:
      - Tator
    post:
      operationId: CreateTemporaryFile
      description: 'Create temporary file.


        Temporary files are files stored server side for a defined duration.



        The file must first be uploaded via tus, and can subsequently be saved using

        this endpoint.'
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemporaryFileSpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of temporary file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteTemporaryFileList
      description: 'Delete temporary file list.


        Temporary files are files stored server side for a defined duration.



        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: expired
        in: query
        required: false
        description: If greater than 0 will return only expired files
        explode: false
        schema:
          type: integer
          default: 0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
      tags:
      - Tator
  /rest/TemporaryFile/{id}:
    get:
      operationId: GetTemporaryFile
      description: 'Get temporary file.


        Temporary files are files stored server side for a defined duration.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a temporary file.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of temporary file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemporaryFile'
      tags:
      - Tator
    delete:
      operationId: DeleteTemporaryFile
      description: 'Delete temporary file.


        Temporary files are files stored server side for a defined duration.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a temporary file.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of temporary file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/UploadInfo/{project}:
    get:
      operationId: GetUploadInfo
      description: 'Retrieve URL for file upload to a given project.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: expiration
        in: query
        required: false
        description: Number of seconds until URL expires and becomes invalid.
        schema:
          type: integer
          minimum: 1
          maximum: 86400
          default: 86400
      - name: num_parts
        in: query
        required: false
        description: Number of upload parts. Maximum part size is 5GB.
        schema:
          type: integer
          minimum: 1
          maximum: 10000
          default: 1
      - name: media_id
        in: query
        required: false
        description: Media ID if this is an upload for existing media.
        schema:
          type: integer
          minimum: 1
      - name: filename
        in: query
        required: false
        description: Filename to use if `media_id` is given. If a file with the same
          name already exists under the given media ID prefix, the new upload will
          replace it. Ignored if `media_id` is not given.
        schema:
          type: string
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Information required for upload via HTTP PUT.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadInfo'
      tags:
      - Tator
  /rest/Users:
    get:
      operationId: GetUserList
      description: Get list of users.
      parameters:
      - name: username
        in: query
        required: false
        description: Username associated with user. Either this or email must be supplied.
        schema:
          type: string
      - name: email
        in: query
        required: false
        description: Email address associated with user. Either this or email must
          be supplied.
        schema:
          type: string
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of user list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags:
      - Tator
  /rest/User/GetCurrent:
    get:
      operationId: Whoami
      description: 'Get current user.


        Retrieves user making the request.

        '
      parameters: []
      responses:
        '200':
          description: Successful retrieval of user who sent request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags:
      - Tator
  /rest/User/{id}:
    get:
      operationId: GetUser
      description: Get user.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a localization association.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags:
      - Tator
    patch:
      operationId: UpdateUser
      description: Update user.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a localization association.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
      tags:
      - Tator
  /rest/Versions/{project}:
    get:
      operationId: GetVersionList
      description: 'Get version list.


        Versions allow for multiple "layers" of annotations on the same media. Versions

        are created at the project level, but are only displayed for a given media

        if that media contains annotations in that version. The version of an annotation

        can be set by providing it in a POST operation. Currently only localizations

        and states can have versions.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: Unique integer identifying a media.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of version list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Version'
      tags:
      - Tator
    post:
      operationId: CreateVersion
      description: 'Create version.


        Versions allow for multiple "layers" of annotations on the same media. Versions

        are created at the project level, but are only displayed for a given media

        if that media contains annotations in that version. The version of an annotation

        can be set by providing it in a POST operation. Currently only localizations

        and states can have versions.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionSpec'
            example:
              name: My new version
              description: New description
              show_empty: true
              bases:
              - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
      tags:
      - Tator
  /rest/Version/{id}:
    get:
      operationId: GetVersion
      description: 'Get version.


        Versions allow for multiple "layers" of annotations on the same media. Versions

        are created at the project level, but are only displayed for a given media

        if that media contains annotations in that version. The version of an annotation

        can be set by providing it in a POST operation. Currently only localizations

        and states can have versions.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a version.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
      tags:
      - Tator
    patch:
      operationId: UpdateVersion
      description: 'Update version.


        Versions allow for multiple "layers" of annotations on the same media. Versions

        are created at the project level, but are only displayed for a given media

        if that media contains annotations in that version. The version of an annotation

        can be set by providing it in a POST operation. Currently only localizations

        and states can have versions.



        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a version.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionUpdate'
            example:
              name: New name
              description: New description
              show_empty: true
              bases:
              - 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteVersion
      description: 'Delete version.


        Versions allow for multiple "layers" of annotations on the same media. Versions

        are created at the project level, but are only displayed for a given media

        if that media contains annotations in that version. The version of an annotation

        can be set by providing it in a POST operation. Currently only localizations

        and states can have versions.



        Note that this will also delete any localizations or states associated

        with the deleted version.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a version.
        schema:
          type: integer
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/VideoFiles/{id}:
    get:
      operationId: GetVideoFileList
      description: "Get video file list.\n\nVideo files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying video. One or more video files can be used to reference\nstreaming\
        \ or archival roles in a `Media` object. The file itself must first be \n\
        uploaded to a URL retrieved from the `UploadInfo` endpoint, and the returned\
        \ object key \nshould be specified in the video file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: true
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - streaming
          - archival
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of video file list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoDefinition'
      tags:
      - Tator
    post:
      operationId: CreateVideoFile
      description: "Create video file.\n\nVideo files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying video. One or more video files can be used to reference\nstreaming\
        \ or archival roles in a `Media` object. The file itself must first be \n\
        uploaded to a URL retrieved from the `UploadInfo` endpoint, and the returned\
        \ object key \nshould be specified in the video file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: true
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - streaming
          - archival
      - name: index
        in: query
        required: false
        description: Insertion index. Must be less than size of current list of videos
          for the specified `role`. If omitted, the video file will be appended to
          the end of the list.
        schema:
          type: integer
          minimum: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoDefinition'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of video file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/VideoFile/{id}:
    get:
      operationId: GetVideoFile
      description: "Get video file.\n\nVideo files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying video. One or more video files can be used to reference\nstreaming\
        \ or archival roles in a `Media` object. The file itself must first be \n\
        uploaded to a URL retrieved from the `UploadInfo` endpoint, and the returned\
        \ object key \nshould be specified in the video file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: true
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - streaming
          - archival
      - name: index
        in: query
        required: true
        description: Index of object. Must be less than size of current list of videos
          for the specified `role`.
        schema:
          type: integer
          minimum: 0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful retrieval of video file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoDefinition'
      tags:
      - Tator
    patch:
      operationId: UpdateVideoFile
      description: "Update video file.\n\nVideo files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying video. One or more video files can be used to reference\nstreaming\
        \ or archival roles in a `Media` object. The file itself must first be \n\
        uploaded to a URL retrieved from the `UploadInfo` endpoint, and the returned\
        \ object key \nshould be specified in the video file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: true
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - streaming
          - archival
      - name: index
        in: query
        required: true
        description: Index of object. Must be less than size of current list of videos
          for the specified `role`.
        schema:
          type: integer
          minimum: 0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoDefinition'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of video file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteVideoFile
      description: "Delete video file.\n\nVideo files are stored under the `media_files`\
        \ field of `Media` objects. They are used to \nrelate media metadata to an\
        \ underlying video. One or more video files can be used to reference\nstreaming\
        \ or archival roles in a `Media` object. The file itself must first be \n\
        uploaded to a URL retrieved from the `UploadInfo` endpoint, and the returned\
        \ object key \nshould be specified in the video file's `path` field.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a media object.
        schema:
          type: integer
      - name: role
        in: query
        required: true
        description: Role of media file being referenced.
        schema:
          type: string
          enum:
          - streaming
          - archival
      - name: index
        in: query
        required: true
        description: Index of object. Must be less than size of current list of videos
          for the specified `role`.
        schema:
          type: integer
          minimum: 0
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of video file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Token:
    post:
      operationId: CreateObtainAuthToken
      description: ''
      parameters: []
      responses:
        '200':
          description: Login credentials accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          description: Login credentials invalid.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      tags:
      - Tator
  /rest/AlgorithmLaunch/{project}:
    post:
      operationId: AlgorithmLaunch
      description: "Launch a registered algorithm.\n\nThis will create one or more\
        \ Argo workflows that execute the named algorithm\nregistration. To get a\
        \ list of available algorithms, use the `Algorithms` endpoint.\nA media list\
        \ will be submitted for processing using either a query string or \na list\
        \ of media IDs. If neither are included, the algorithm will be launched on\n\
        all media in the project. \n\nMedia is divided into batches for based on the\
        \ `files_per_job` field of the \n`Algorithm` object. One batch is submitted\
        \ to each Argo workflow.\n\nSubmitted algorithm jobs may be cancelled via\
        \ the `Job` or `JobGroup` endpoints.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgorithmLaunchSpec'
            examples:
              by_query:
                summary: Launch by query
                value:
                  algorithm_name: My Algorithm
                  media_query: ?project=1&type=2
              by_ids:
                summary: Launch by media ids
                value:
                  algorithm_name: My Algorithm
                  media_ids:
                  - 1
                  - 5
                  - 10
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful launch of algorithm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmLaunch'
      tags:
      - Tator
  /rest/SaveAlgorithmManifest/{project}:
    post:
      operationId: SaveAlgorithmManifest
      description: 'Saves an uploaded algorithm manifest to the desired project. It
        is expected this manifest

        corresponds with an algorithm workflow to be registered by another endpoint.


        Manifest is uploaded via tus, a separate mechanism from the REST API. Once
        a manifest

        upload is complete (a .yaml file), the file must be saved to the database
        using

        this endpoint.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgorithmManifestSpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful save of algortihm manifest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmManifest'
      tags:
      - Tator
  /rest/AttributeType/{id}:
    post:
      operationId: AddAttribute
      description: 'Add attribute to Type.


        A attribute type is the metadata definition object for a user-defined attribute.
        It includes

        name, type, and any other associated fields, depending on the type.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a unique entity type.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeTypeSpec'
            example:
              entity_type: LocalizationType
              addition:
                name: My Integer
                dtype: int
                default: 0
                minimum: -1
                maximum: 1
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of attribute.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    patch:
      operationId: RenameAttribute
      description: 'Rename and/or change the type of an existing attribute on Type.


        A attribute type is the metadata definition object for a user-defined attribute.
        It includes

        name, type, and any other associated fields, depending on the type.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a unique entity type.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeTypeUpdate'
            example:
              entity_type: LocalizationType
              global: 'true'
              old_attribute_type_name: My Old Attribute
              new_attribute_type:
                name: My Enumeration
                dtype: enum
                default: a
                choices:
                - a
                - b
                - c
                labels:
                - a
                - b
                - c
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful update of attribute.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
    delete:
      operationId: DeleteAttribute
      description: 'Delete an existing attribute on Type.


        A attribute type is the metadata definition object for a user-defined attribute.
        It includes

        name, type, and any other associated fields, depending on the type.

        '
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying a unique entity type.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeTypeDelete'
            example:
              entity_type: LocalizationType
              attribute_to_delete: My Old Attribute
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Successful deletion of attribute.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/CloneMedia/{project}:
    post:
      operationId: CloneMediaList
      description: "Clone media list.\n\nThis method copies media to a different project\
        \ without copying the \nunderlying files. It accepts the same query parameters\
        \ as a `Media` `GET`\nrequest. All media matching the query will be copied\
        \ to the project,\nmedia type, and section in the given request body. Section\
        \ is passed as\na section name; if the given section does not exist, it will\
        \ be created.\n\nThis endpoint will only clone up to 500 media per request.\
        \ Use the `start`,\n`stop`, or `after` parameters to paginate a request.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying the source project.
        schema:
          type: integer
      - name: media_id
        in: query
        required: false
        description: List of integers identifying media.
        explode: false
        schema:
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
      - name: type
        in: query
        required: false
        description: Unique integer identifying media type.
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Name of the media to filter on.
        schema:
          type: string
      - name: section
        in: query
        required: false
        description: Unique integer identifying a media section.
        schema:
          type: integer
      - name: dtype
        in: query
        required: false
        description: Data type of the files, either image or video.
        schema:
          type: string
          enum:
          - image
          - video
      - name: md5
        in: query
        required: false
        description: MD5 sum of the media file.
        schema:
          type: string
      - name: gid
        in: query
        required: false
        description: Upload group ID of the media file.
        schema:
          type: string
      - name: uid
        in: query
        required: false
        description: Upload unique ID of the media file.
        schema:
          type: string
      - name: after
        in: query
        required: false
        description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Lucene query syntax string for use with Elasticsearch. See <a
          href=https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl-query-string-query.html#query-string-syntax>reference</a>.
          If this parameter is applied to localizations or states, it will include
          search results for parent media. Likewise, if this parameter is applied
          media, it will include results for child localizations and states. For example,
          if the search is for "foo" on media, results will include all media with
          attributes or name "foo", as well as media containing states and/or localizations
          with attributes equal to "foo".
        schema:
          type: string
        examples:
          no_search:
            summary: No filter
            value: '*'
          basic:
            summary: Generic search
            value: '"My search string"'
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          wildcard:
            summary: Wildcard search
            value: Species:*hake
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
      - name: attribute
        in: query
        required: false
        description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lt
        in: query
        required: false
        description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_lte
        in: query
        required: false
        description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gt
        in: query
        required: false
        description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_gte
        in: query
        required: false
        description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_contains
        in: query
        required: false
        description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_distance
        in: query
        required: false
        description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: attribute_null
        in: query
        required: false
        description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        schema:
          type: array
          items:
            type: string
        explode: false
      - name: start
        in: query
        required: false
        description: Pagination start index. Index of the first item in a larger list
          to return.
        schema:
          type: integer
      - name: stop
        in: query
        required: false
        description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        schema:
          type: integer
      - name: force_es
        in: query
        required: false
        description: Set to 1 to require an Elasticsearch based query. This can be
          used as a consistency check or for performance comparison.
        schema:
          type: integer
          enum:
          - 0
          - 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneMediaSpec'
            examples:
              section:
                summary: Clone to section
                value:
                  dest_project: 1
                  dest_type: 1
                  dest_section: My section
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful creation of cloned media list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListResponse'
      tags:
      - Tator
  /rest/DownloadInfo/{project}:
    post:
      operationId: GetDownloadInfo
      description: 'Retrieve URL for one or more file downloads from a given project.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      - name: expiration
        in: query
        required: false
        description: Number of seconds until URL expires and becomes invalid.
        schema:
          type: integer
          minimum: 1
          maximum: 86400
          default: 86400
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadInfoSpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '200':
          description: Information required for download.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DownloadInfo'
      tags:
      - Tator
  /rest/Email/{project}:
    post:
      operationId: SendEmail
      description: 'Send an email message using the Tator AWS SES configured credentials.''


        Messages can only be sent to members of the same project.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailSpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful completion of email sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/Notify:
    post:
      operationId: Notify
      description: 'Send a notification to administrators.


        Uses the Slack API to send a notification to system administrators. This

        endpoint can only be used by system administrators and must be configured

        in a Tator deployment''s settings.

        '
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifySpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '503':
          description: Service not available.
        '201':
          description: Message sent successfully.
      tags:
      - Tator
  /rest/Transcode/{project}:
    post:
      operationId: Transcode
      description: "Start a transcode.\n\nVideos in Tator must be transcoded to a\
        \ multi-resolution streaming format before they\ncan be viewed or annotated.\
        \ This endpoint launches a transcode on raw uploaded video by\ncreating an\
        \ Argo workflow. The workflow will download the uploaded raw video, transcode\n\
        it to the proper format, upload the transcoded video, and save the video using\
        \ the \n`SaveVideo` endpoint.\n\nNote that the raw video must be uploaded\
        \ first via tus, which is a separate mechanism \nfrom the REST API. This endpoint\
        \ requires a group and run UUID associated with this \nupload. If no progress\
        \ messages were generated during upload, then the group and run \nUUIDs can\
        \ be newly generated.\n\nTranscodes may be cancelled via the `Job` or `JobGroup`\
        \ endpoints.\n"
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranscodeSpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful save of the video in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transcode'
      tags:
      - Tator
  /rest/UploadCompletion/{project}:
    post:
      operationId: CompleteUpload
      description: 'Complete multipart upload.

        '
      parameters:
      - name: project
        in: path
        required: true
        description: A unique integer identifying a project.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadCompletionSpec'
      responses:
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '201':
          description: Successful completion of upload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/MergeStates/{id}:
    patch:
      operationId: MergeStates
      description: "Merges the source state into the target state. \nThe target state\
        \ will inherit the the source's localizations and will be deleted.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying the target state to accept the merge.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateMergeUpdate'
      responses:
        '200':
          description: Successful update of state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
  /rest/TrimStateEnd/{id}:
    patch:
      operationId: TrimStateEnd
      description: "Trims the state's start or end point by deleting the localizations\
        \ \nbefore the new start point or after the new end point.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer identifying the state to trim
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateTrimUpdate'
      responses:
        '200':
          description: Successful update of state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
      - Tator
components:
  schemas:
    AffiliationSpec:
      type: object
      properties:
        user:
          description: Unique integer identifying a user.
          type: integer
          minimum: 1
        permission:
          description: User permission level for the organization.
          type: string
          enum:
          - Member
          - Admin
    AffiliationUpdate:
      type: object
      properties:
        permission:
          description: User permission level for the organization.
          type: string
          enum:
          - Member
          - Admin
    Affiliation:
      type: object
      description: Affiliation object.
      properties:
        id:
          type: integer
          description: Unique integer identifying a affiliation.
        user:
          description: Unique integer identifying a user.
          type: integer
          minimum: 1
        permission:
          description: User permission level for the organization.
          type: string
          enum:
          - Member
          - Admin
        organization:
          description: Unique integer identifying an organization.
          type: integer
          minimum: 1
    AlgorithmParameter:
      type: object
      required:
      - name
      - value
      properties:
        name:
          description: Name of algorithm parameter
          type: string
        value:
          description: Value of algorithm parameter
          oneOf:
          - type: number
          - type: string
    AlgorithmLaunchSpec:
      type: object
      required:
      - algorithm_name
      properties:
        algorithm_name:
          description: Name of the algorithm to execute.
          type: string
          nullable: false
        media_query:
          description: Query string used to filter media IDs. If supplied, media_ids
            will be ignored.
          type: string
          nullable: false
        media_ids:
          description: List of media IDs. Must supply media_query or media_ids.
          type: array
          items:
            type: integer
            nullable: false
          nullable: false
        extra_params:
          description: Extra parameters to pass into the algorithm
          type: array
          items:
            $ref: '#/components/schemas/AlgorithmParameter'
            x-scope:
            - ''
            - '#/components/schemas/AlgorithmLaunchSpec'
      nullable: false
    AlgorithmLaunch:
      type: object
      properties:
        message:
          type: string
          description: Message indicating successful launch.
        uid:
          type: array
          description: A list of uuid strings identifying each job started.
          items:
            type: string
        gid:
          type: string
          description: A uuid string identifying the group of jobs started.
    Algorithm:
      type: object
      properties:
        id:
          type: integer
          description: Unique integer identifying the registered algorithm.
        project:
          type: integer
          description: Unique integer identifying the project associated with the
            algorithm.
        name:
          type: string
          description: Unique name of the algorithm workflow.
          nullable: false
        user:
          type: integer
          description: Unique integer identifying the user registering the algorithm.
        description:
          type: string
          description: Description of the algorithm.
        manifest:
          type: string
          description: Server URL to argo manifest file (.yaml)
        cluster:
          type: integer
          description: Unique integer identifying the job cluster.
        files_per_job:
          type: integer
          description: Number of media files to be submitted to each workflow.
    AlgorithmSpec:
      type: object
      description: Algorithm registration creation spec.
      required:
      - name
      - user
      - manifest
      - files_per_job
      properties:
        name:
          type: string
          description: Unique name of the algorithm workflow.
          nullable: false
        user:
          type: integer
          description: Unique integer identifying the user registering the algorithm.
        description:
          type: string
          description: Description of the algorithm.
        manifest:
          type: string
          description: Server URL to argo manifest file (.yaml)
        cluster:
          type: integer
          description: Unique integer identifying the job cluster.
        files_per_job:
          type: integer
          description: Number of media files to be submitted to each workflow.
    AlgorithmManifest:
      type: object
      properties:
        url:
          description: Name of algorithm manifest (.yaml) file
          type: string
    AlgorithmManifestSpec:
      type: object
      description: Algorithm manifest save spec.
      properties:
        name:
          description: Name of manifest (.yaml) file
          type: string
        upload_url:
          description: URL of the uploaded file returned from tus upload
          type: string
    AnalysisSpec:
      type: object
      required:
      - name
      - data_query
      properties:
        name:
          description: Name of analysis.
          type: string
        data_query:
          description: Lucene query string used to retrieve entities to analyze.
          type: string
          default: '*'
    Analysis:
      type: object
      properties:
        id:
          type: integer
          description: Unique integer identifying the analysis.
        name:
          description: Name of analysis.
          type: string
        data_query:
          description: Lucene query string used to retrieve entities to analyze.
          type: string
          default: '*'
    ArchiveConfig:
      type: object
      description: Settings for archival video encode and storage. If not set, the
        raw video will be stored in Tator.
      properties:
        name:
          type: string
          description: Name of this archive config, used for retrieval in case of
            multiple archive configs.
        encode:
          $ref: '#/components/schemas/EncodeConfig'
          x-scope:
          - ''
          - '#/components/schemas/MediaType'
          - '#/components/schemas/ArchiveConfig'
        s3_storage:
          $ref: '#/components/schemas/S3StorageConfig'
          x-scope:
          - ''
          - '#/components/schemas/MediaType'
          - '#/components/schemas/ArchiveConfig'
    AttributeTypeSpec:
      type: object
      description: Addition of an attribute to a type.
      properties:
        entity_type:
          type: string
          description: The entity type containing the attribute to rename.
        addition:
          $ref: '#/components/schemas/AttributeType'
          x-scope:
          - ''
          - '#/components/schemas/AttributeTypeSpec'
    AttributeTypeUpdate:
      type: object
      description: Renames an attribute of a type.
      properties:
        entity_type:
          type: string
          description: The entity type containing the attribute to rename.
        global:
          type: string
          description: If 'true', applies dtype mutation to all attributes with the
            same name.
        old_attribute_type_name:
          type: string
          description: The attribute to rename.
        new_attribute_type:
          type: object
          properties:
            name:
              description: Name of the attribute.
              type: string
            description:
              description: Description of the attribute.
              type: string
            dtype:
              description: Data type of the attribute.
              type: string
              enum:
              - bool
              - int
              - float
              - enum
              - string
              - datetime
              - geopos
            required:
              description: True if this attribute is required for POST requests.
              type: boolean
            order:
              description: Integer specifying relative order this attribute is displayed
                in the UI. Negative values are hidden by default.
              type: integer
            default:
              $ref: '#/components/schemas/AttributeValue'
              x-scope:
              - ''
              - '#/components/schemas/AttributeTypeUpdate'
            minimum:
              description: Lower bound for int or float dtype.
              type: number
            maximum:
              description: Upper bound for int or float dtype.
              type: number
            choices:
              description: Array of possible values; required for enum dtype.
              type: array
              items:
                type: string
            labels:
              description: Array of labels for enum dtype.
              type: array
              items:
                type: string
            autocomplete:
              $ref: '#/components/schemas/AutocompleteService'
              x-scope:
              - ''
              - '#/components/schemas/AttributeTypeUpdate'
            use_current:
              description: True to use current datetime as default for datetime dtype.
              type: boolean
            style:
              description: 'Available options: disabled|long_string|start_frame|end_frame|start_frame_check|end_frame_check   Multiple
                options can be chained together separated by white space. "disabled"
                will not allow the user to edit the attribute in the Tator GUI. Create
                a text area string if "long_string" is combined with "string" dtype.
                "start_frame" and "end_frame" used in conjunction with "attr_style_range"
                interpolation. "start_frame_check and "end_frame_check" are used in
                conjunction with "attr_style_range" interpolation. "range_set and
                in_video_check" is used in conjunction with "attr_style_range" interpolation.
                When associated with a bool, these checks will result in Tator GUI
                changes with the corresponding start_frame and end_frame attributes.'
              type: string
    AttributeTypeDelete:
      type: object
      description: Deletes an existing attribute from a type.
      properties:
        entity_type:
          type: string
          description: The entity type containing the attribute to rename.
        attribute_to_delete:
          type: string
          description: The attribute to delete.
    AttributeType:
      type: object
      properties:
        name:
          description: Name of the attribute.
          type: string
        description:
          description: Description of the attribute.
          type: string
          default: ''
        dtype:
          description: Data type of the attribute.
          type: string
          enum:
          - bool
          - int
          - float
          - enum
          - string
          - datetime
          - geopos
        required:
          description: True if this attribute is required for POST requests.
          type: boolean
          default: false
        order:
          description: Integer specifying relative order this attribute is displayed
            in the UI. Negative values are hidden by default.
          type: integer
          default: 0
        default:
          $ref: '#/components/schemas/AttributeValue'
          x-scope:
          - ''
          - '#/components/schemas/LeafType'
          - '#/components/schemas/AttributeType'
        minimum:
          description: Lower bound for int or float dtype.
          type: number
        maximum:
          description: Upper bound for int or float dtype.
          type: number
        choices:
          description: Array of possible values; required for enum dtype.
          type: array
          items:
            type: string
        labels:
          description: Array of labels for enum dtype.
          type: array
          items:
            type: string
        autocomplete:
          $ref: '#/components/schemas/AutocompleteService'
          x-scope:
          - ''
          - '#/components/schemas/LeafType'
          - '#/components/schemas/AttributeType'
        use_current:
          description: True to use current datetime as default for datetime dtype.
          type: boolean
        style:
          description: 'Available options: disabled|long_string|start_frame|end_frame|start_frame_check|end_frame_check   Multiple
            options can be chained together separated by white space. "disabled" will
            not allow the user to edit the attribute in the Tator GUI. Create a text
            area string if "long_string" is combined with "string" dtype. "start_frame"
            and "end_frame" used in conjunction with "attr_style_range" interpolation.
            "start_frame_check and "end_frame_check" are used in conjunction with
            "attr_style_range" interpolation. "range_set and in_video_check" is used
            in conjunction with "attr_style_range" interpolation. When associated
            with a bool, these checks will result in Tator GUI changes with the corresponding
            start_frame and end_frame attributes.'
          type: string
    AttributeValue:
      description: Boolean, integer, float, string, datetime, or [lon, lat].
      nullable: true
      oneOf:
      - type: boolean
        nullable: false
      - type: number
        nullable: false
      - type: string
        nullable: false
      - type: array
        minItems: 2
        maxItems: 2
        items:
          type: number
          nullable: false
        nullable: false
    AudioDefinition:
      type: object
      required:
      - path
      - codec
      properties:
        path:
          type: string
          description: Relative URL to the file.
          nullable: false
        size:
          type: integer
          description: File size in bytes.
          nullable: false
        bit_rate:
          type: integer
          description: Bit rate in bits per second
          nullable: false
        codec:
          description: Human readable codec.
          type: string
          nullable: false
        host:
          description: If supplied will use this instead of currently connected host,
            e.g. https://example.com
          type: string
        http_auth:
          description: If specified will be used for HTTP authorization in request
            for media, i.e. "bearer <token>".
          type: string
        codec_mime:
          description: 'Example mime: "video/mp4; codecs="avc1.64001e"". Only relevant
            for streaming files, will assume example above if not present.'
          type: string
        codec_description:
          description: Description other than codec.
          type: string
          nullable: false
      nullable: false
    AutocompleteService:
      type: object
      nullable: true
      properties:
        serviceUrl:
          description: URL of the autocomplete service.
          type: string
    BookmarkSpec:
      type: object
      properties:
        name:
          description: Name of the bookmark.
          type: string
          nullable: false
        uri:
          description: URI to the saved link.
          type: string
          nullable: false
      nullable: false
    BookmarkUpdate:
      type: object
      properties:
        name:
          description: Name of the bookmark.
          type: string
          nullable: false
        uri:
          description: URI to the saved link.
          type: string
          nullable: false
      nullable: false
    Bookmark:
      type: object
      description: Bookmark object.
      properties:
        id:
          type: integer
          description: Unique integer identifying a bookmark.
        project:
          type: integer
          description: Unique integer identifying a project.
        user:
          description: Unique integer identifying a user.
          type: integer
          minimum: 1
        name:
          description: Name of the bookmark.
          type: string
          nullable: false
        uri:
          description: URI to the saved link.
          type: string
          nullable: false
    CloneMediaSpec:
      type: object
      required:
      - dest_project
      - dest_type
      properties:
        dest_project:
          description: Unique integer identyifying destination project.
          type: integer
        dest_type:
          description: Unique integer identifying destination media type. Use -1 to
            automatically select the media type if only one media type exists in the
            destination project.
          type: integer
          minimum: -1
        dest_section:
          description: Destination media section name.
          type: string
          nullable: true
    DownloadInfoSpec:
      type: object
      properties:
        keys:
          type: array
          description: Array of object keys for download info retrieval.
          items:
            type: string
            nullable: false
          nullable: false
      nullable: false
    DownloadInfo:
      type: object
      properties:
        key:
          type: string
          description: Object key.
        url:
          type: string
          description: URL for downloading object specified by key.
    EmailSpec:
      type: object
      description: Send an email message to members of the project using the Tator
        configured AWS email service
      required:
      - recipients
      - subject
      - text
      properties:
        recipients:
          description: Recipients of the email message. They must be members of this
            project. Entries are either in "Name <email@email.com>" or "email@email.com"
            format
          type: array
          items:
            type: string
            nullable: false
          nullable: false
        subject:
          description: Subject of the email message
          type: string
          nullable: false
        text:
          description: Text body of the email message. HTML is currently not supported.
          type: string
          nullable: false
        attachments:
          description: S3 object(s) to send as attachment(s). Ensure the attachment
            size does not exceed the corresponding email service limits
          type: array
          items:
            $ref: '#/components/schemas/EmailAttachmentSpec'
            x-scope:
            - ''
            - '#/components/schemas/EmailSpec'
            nullable: false
          nullable: false
      nullable: false
    EmailAttachmentSpec:
      type: object
      description: Email attachment spec.
      required:
      - key
      - name
      properties:
        key:
          description: S3 key of file
          type: string
          nullable: false
        name:
          description: Name of file to use in attachment
          type: string
          nullable: false
      nullable: false
    EncodeConfig:
      type: object
      description: Settings for archival video encode. Any additional properties will
        be passed as command line arguments to ffmpeg. If set to null, the raw file
        will be used (no transcode).
      additionalProperties: true
      properties:
        vcodec:
          type: string
          description: Video codec.
          enum:
          - h264
          - hevc
          default: hevc
        crf:
          type: integer
          description: Constant rate factor.
          minimum: 0
          maximum: 51
          default: 23
        preset:
          type: string
          description: Preset for ffmpeg encoding.
          enum:
          - ultrafast
          - superfast
          - veryfast
          - faster
          - fast
          - medium
          - slow
          - slower
          - veryslow
          default: fast
        tune:
          type: string
          description: Tune setting for ffmpeg.
          enum:
          - film
          - animation
          - grain
          - stillimage
          - fastdecode
          - zerolatency
          - psnr
          - ssim
          default: fastdecode
    FavoriteSpec:
      type: object
      properties:
        type:
          description: Unique integer identifying a localization type.
          type: integer
          minimum: 1
          nullable: false
        name:
          description: Name of the favorite.
          type: string
          nullable: false
        values:
          description: Attribute name/value pairs.
          type: object
          additionalProperties: true
          nullable: false
        page:
          description: Integer specifying page to display on. Should be 1-10.
          type: integer
          default: 1
          minimum: 1
          maximum: 10
          nullable: false
      nullable: false
    FavoriteUpdate:
      type: object
      properties:
        name:
          description: Name of the favorite.
          type: string
          nullable: false
    Favorite:
      type: object
      description: Favorite object.
      properties:
        id:
          type: integer
          description: Unique integer identifying a favorite.
        user:
          description: Unique integer identifying a user.
          type: integer
          minimum: 1
        meta:
          type: integer
          description: Unique integer identifying entity type of this localization.
        name:
          description: Name of the favorite.
          type: string
          nullable: false
        values:
          description: Attribute name/value pairs.
          type: object
          additionalProperties: true
          nullable: false
        page:
          description: Integer specifying page to display on. Should be 1-10.
          type: integer
          default: 1
          minimum: 1
          maximum: 10
          nullable: false
    ImageDefinition:
      type: object
      required:
      - path
      - resolution
      properties:
        path:
          type: string
          description: Relative URL to the file.
          nullable: false
        size:
          type: integer
          description: File size in bytes.
          nullable: false
        resolution:
          description: Resolution of the video in pixels (height, width).
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
        host:
          description: If supplied will use this instead of currently connected host,
            e.g. https://example.com
          type: string
        http_auth:
          description: If specified will be used for HTTP authorization in request
            for media, i.e. "bearer <token>".
          type: string
        mime:
          description: 'Example mime: "image/jpg".'
          type: string
          nullable: false
      nullable: false
    JobNode:
      type: object
      description: Represents a step or node (for DAGs) in a job.
      properties:
        id:
          description: Unique identifier of the job node.
          type: string
        children:
          type: array
          items:
            description: ID of child node.
            type: string
        task:
          description: Name of task performed by this node.
          type: string
        status:
          description: Status of this node.
          type: string
        start_time:
          description: Start time of this node.
          type: string
          nullable: true
          format: date-time
        stop_time:
          description: Stop time of this node.
          type: string
          nullable: true
          format: date-time
    Job:
      type: object
      properties:
        id:
          description: Unique identifier of the job generated by Argo.
          type: string
        uid:
          description: Unique ID of the job.
          type: string
        gid:
          description: Group ID of the job.
          type: string
        user:
          description: Unique integer identifying user who submitted the job.
          type: integer
        project:
          description: Unique integer identifying a project.
          type: integer
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/JobNode'
            x-scope:
            - ''
            - '#/components/schemas/Job'
        status:
          description: Status of this job.
          type: string
        start_time:
          description: Start time of this job.
          type: string
          nullable: true
          format: date-time
        stop_time:
          description: Stop time of this job.
          type: string
          nullable: true
          format: date-time
    LeafTypeSpec:
      type: object
      description: Leaf type spec.
      properties:
        name:
          description: Name of the leaf type.
          type: string
        description:
          description: Description of the leaf type.
          type: string
          default: ''
        attribute_types:
          description: Attribute type definitions.
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/LeafType'
    LeafTypeUpdate:
      type: object
      description: Leaf type update.
      properties:
        description:
          description: Description of the leaf type.
          type: string
          default: ''
        name:
          description: Name of the leaf type.
          type: string
    LeafType:
      type: object
      description: Leaf type.
      properties:
        id:
          type: integer
          description: Unique integer identifying a leaf type.
        project:
          type: integer
          description: Unique integer identifying project for this leaf type.
        dtype:
          type: string
          description: Name of this data type, value is always "leaf".
        name:
          description: Name of the leaf type.
          type: string
        description:
          description: Description of the leaf type.
          type: string
          default: ''
        attribute_types:
          description: Attribute type definitions.
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/LeafType'
    LeafSuggestion:
      type: object
      properties:
        value:
          type: string
          description: Name of the suggestion.
        group:
          type: string
          description: Group of the suggestion.
        data:
          type: object
          description: Auxiliary data associated with the leaf.
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/LeafSuggestion'
    LeafSpec:
      type: object
      required:
      - name
      - type
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
        x-scope:
        - ''
        - '#/components/schemas/LeafSpec'
      properties:
        name:
          description: Name of the leaf.
          type: string
        type:
          description: Unique integer identifying a leaf type.
          type: integer
        parent:
          description: ID to use as parent if there is one.
          type: integer
          nullable: true
    LeafUpdate:
      type: object
      properties:
        name:
          description: Name of the leaf.
          type: string
        attributes:
          description: Attribute values to update.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/LeafUpdate'
    Leaf:
      type: object
      description: Leaf object.
      properties:
        id:
          type: integer
          description: Unique integer identifying the leaf.
        meta:
          type: integer
          description: Unique integer identifying the entity type.
        project:
          type: integer
          description: Unique integer identifying a project.
        path:
          type: string
          description: Full path to leaf in hierarchy.
        name:
          description: Name of the leaf.
          type: string
        parent:
          description: ID to use as parent if there is one.
          type: integer
          nullable: true
        attributes:
          description: Object containing attribute values.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/Leaf'
    LeafIdQuery:
      type: object
      properties:
        ids:
          description: Array of leaf IDs to retrieve.
          type: array
          items:
            type: integer
            minimum: 1
    LocalizationTypeSpec:
      type: object
      required:
      - name
      - dtype
      - media_types
      properties:
        name:
          type: string
          description: Name of the localization type.
        description:
          type: string
          description: Description of the localization type.
        dtype:
          type: string
          description: Shape of this localization type.
          enum:
          - box
          - line
          - dot
        colorMap:
          $ref: '#/components/schemas/ColorMap'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
        line_width:
          type: integer
          description: Width of the line used to draw the localization.
          minimum: 1
        visible:
          type: boolean
          description: Whether this type should be displayed in the UI.
          default: true
        grouping_default:
          type: boolean
          description: Whether to group elements in the UI by default.
          default: true
        attribute_types:
          description: Attribute type definitions.
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
        media_types:
          description: List of integers identifying media types that this localization
            type may apply to.
          type: array
          items:
            type: integer
            minimum: 1
          minItems: 1
    LocalizationTypeUpdate:
      type: object
      description: Localization type update.
      properties:
        description:
          type: string
          description: Description of the localization type.
        name:
          type: string
          description: Name of the localization type.
        colorMap:
          $ref: '#/components/schemas/ColorMap'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
        line_width:
          type: integer
          description: Width of the line used to draw the localization.
          minimum: 1
        visible:
          type: boolean
          description: Whether this type should be displayed in the UI.
          default: true
        grouping_default:
          type: boolean
          description: Whether to group elements in the UI by default.
          default: true
    LocalizationType:
      type: object
      description: Localization type.
      properties:
        id:
          type: integer
          description: Unique integer identifying a localization type.
          nullable: false
        project:
          type: integer
          description: Unique integer identifying project for this leaf type.
        media:
          description: List of integers identifying media types that this localization
            type may apply to.
          type: array
          items:
            type: integer
            minimum: 1
        name:
          type: string
          description: Name of the localization type.
        description:
          type: string
          description: Description of the localization type.
        dtype:
          type: string
          description: Shape of this localization type.
          enum:
          - box
          - line
          - dot
        colorMap:
          $ref: '#/components/schemas/ColorMap'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
        line_width:
          type: integer
          description: Width of the line used to draw the localization.
          minimum: 1
        visible:
          type: boolean
          description: Whether this type should be displayed in the UI.
          default: true
        grouping_default:
          type: boolean
          description: Whether to group elements in the UI by default.
          default: true
        attribute_types:
          description: Attribute type definitions.
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
    LocalizationSpec:
      type: object
      description: Localization creation spec. Attribute key/values must be included
        in the base object.
      required:
      - media_id
      - type
      - frame
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
        x-scope:
        - ''
        - '#/components/schemas/LocalizationSpec'
        nullable: false
      properties:
        media_id:
          description: Unique integer identifying a media.
          type: integer
          nullable: false
        type:
          description: Unique integer identifying a localization type.
          type: integer
          nullable: false
        version:
          description: Unique integer identifying the version.
          type: integer
          nullable: false
        x:
          description: Normalized horizontal position of left edge of bounding box
            for `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        y:
          description: Normalized vertical position of top edge of bounding box for
            `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        width:
          description: Normalized width of bounding box for `box` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        height:
          description: Normalized height of bounding box for `box` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        u:
          description: Horizontal vector component for `line` localization types.
          type: number
          minimum: -1.0
          maximum: 1.0
          nullable: true
        v:
          description: Vertical vector component for `line` localization types.
          type: number
          minimum: -1.0
          maximum: 1.0
          nullable: true
        frame:
          description: Frame number of this localization if it is in a video.
          type: integer
          nullable: false
        parent:
          description: If a clone, the pk of the parent.
          type: number
          nullable: true
      nullable: false
    LocalizationUpdate:
      type: object
      properties:
        x:
          description: Normalized horizontal position of left edge of bounding box
            for `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        y:
          description: Normalized vertical position of top edge of bounding box for
            `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        width:
          description: Normalized width of bounding box for `box` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        height:
          description: Normalized height of bounding box for `box` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        u:
          description: Horizontal vector component for `line` localization types.
          type: number
          minimum: -1.0
          maximum: 1.0
          nullable: true
        v:
          description: Vertical vector component for `line` localization types.
          type: number
          minimum: -1.0
          maximum: 1.0
          nullable: true
        frame:
          description: Frame number of this localization if it is in a video.
          type: integer
          nullable: false
        parent:
          description: If a clone, the pk of the parent.
          type: number
          nullable: true
        attributes:
          description: Object containing attribute values.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationUpdate'
            nullable: false
          nullable: false
      nullable: false
    Localization:
      type: object
      properties:
        id:
          type: integer
          description: Unique integer identifying this localization.
        project:
          type: integer
          description: Unique integer identifying project of this localization.
        meta:
          type: integer
          description: Unique integer identifying entity type of this localization.
        media:
          type: integer
          description: Unique integer identifying media of this localization.
        thumbnail_image:
          type: string
          description: URL of thumbnail corresponding to this localization.
        version:
          type: integer
          description: Unique integer identifying a version.
        attributes:
          description: Object containing attribute values.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/Localization'
        created_datetime:
          type: string
          format: date-time
          description: Datetime this localization was created.
        modified_datetime:
          type: string
          format: date-time
          description: Datetime this localization was last modified.
        modified_by:
          type: integer
          description: Unique integer identifying the user who last modified this
            localization.
        user:
          type: integer
          description: Unique integer identifying the user who created this localization.
        x:
          description: Normalized horizontal position of left edge of bounding box
            for `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        y:
          description: Normalized vertical position of top edge of bounding box for
            `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        width:
          description: Normalized width of bounding box for `box` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        height:
          description: Normalized height of bounding box for `box` localization types.
          type: number
          minimum: 0.0
          maximum: 1.0
          nullable: true
        u:
          description: Horizontal vector component for `line` localization types.
          type: number
          minimum: -1.0
          maximum: 1.0
          nullable: true
        v:
          description: Vertical vector component for `line` localization types.
          type: number
          minimum: -1.0
          maximum: 1.0
          nullable: true
        frame:
          description: Frame number of this localization if it is in a video.
          type: integer
          nullable: false
        parent:
          description: If a clone, the pk of the parent.
          type: number
          nullable: true
    LocalizationIdQuery:
      type: object
      properties:
        media_query:
          description: Query string used to filter media IDs. This can be used to
            avoid serialization and download of a media ID list.
          type: string
        media_ids:
          description: Array of parent media IDs for which localizations should be
            retrieved.
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
        ids:
          description: Array of localization IDs to retrieve.
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
        state_ids:
          description: Array of parent state IDs for which localizations should be
            retrieved.
          type: array
          items:
            type: integer
            minimum: 1
      nullable: false
    MediaNext:
      type: object
      properties:
        next:
          type: integer
          minimum: 0
    MediaPrev:
      type: object
      properties:
        prev:
          type: integer
          minimum: 0
    MediaUpdate:
      type: object
      properties:
        name:
          description: Name of the media.
          type: string
        media_files:
          $ref: '#/components/schemas/MediaFiles'
          x-scope:
          - ''
          - '#/components/schemas/Media'
        last_edit_start:
          description: Datetime of the start of the session when this media or its
            annotations were last edited.
          type: string
          format: date-time
          nullable: false
        last_edit_end:
          description: Datetime of the end of the session when this media or its annotations
            were last edited.
          type: string
          format: date-time
          nullable: false
        attributes:
          description: Object containing attribute values.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/Media'
            nullable: false
          nullable: false
        num_frames:
          description: Number of frames in the video.
          type: integer
          minimum: 0
          nullable: false
        fps:
          description: Frame rate of the video.
          type: number
          nullable: false
        codec:
          description: Codec of the original video.
          type: string
          nullable: false
        width:
          description: Pixel width of the video.
          type: integer
          nullable: false
        height:
          description: Pixel height of the video.
          type: integer
          nullable: false
        multi:
          $ref: '#/components/schemas/MultiDefinition'
          x-scope:
          - ''
          - '#/components/schemas/MediaUpdate'
          nullable: false
      nullable: false
    Media:
      type: object
      properties:
        name:
          description: Name of the media.
          type: string
        media_files:
          $ref: '#/components/schemas/MediaFiles'
          x-scope:
          - ''
          - '#/components/schemas/Media'
        last_edit_start:
          description: Datetime of the start of the session when this media or its
            annotations were last edited.
          type: string
          format: date-time
          nullable: false
        last_edit_end:
          description: Datetime of the end of the session when this media or its annotations
            were last edited.
          type: string
          format: date-time
          nullable: false
        attributes:
          description: Object containing attribute values.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/Media'
            nullable: false
          nullable: false
        id:
          type: integer
          description: Unique integer identifying this media.
        project:
          type: integer
          description: Unique integer identifying project of this media.
        meta:
          type: integer
          description: Unique integer identifying entity type of this media.
        created_datetime:
          type: string
          description: Datetime when this media was created.
        created_by:
          type: integer
          description: Unique integer identifying user who created this media.
        modified_datetime:
          type: string
          description: Datetime when this media was last modified.
        modified_by:
          type: integer
          description: Unique integer identifying user who last modified this media.
        md5:
          type: string
          description: MD5 checksum of the media file.
        num_frames:
          type: integer
          description: Number of frames for videos.
        fps:
          type: integer
          description: Frame rate for videos.
        codec:
          type: string
          description: Codec for videos.
        width:
          type: integer
          description: Horizontal resolution in pixels.
        height:
          type: integer
          description: Vertical resolution in pixels.
        gid:
          description: Group ID for the upload group of this media.
          type: string
          nullable: false
        uid:
          description: Unique ID for the upload of this media.
          type: string
          nullable: false
    MediaFiles:
      description: Object containing upload urls for the transcoded file and corresponding
        `VideoDefinition`.
      type: object
      properties:
        archival:
          type: array
          items:
            $ref: '#/components/schemas/VideoDefinition'
            x-scope:
            - ''
            - '#/components/schemas/Media'
            - '#/components/schemas/MediaFiles'
        streaming:
          type: array
          items:
            $ref: '#/components/schemas/VideoDefinition'
            x-scope:
            - ''
            - '#/components/schemas/Media'
            - '#/components/schemas/MediaFiles'
        audio:
          type: array
          items:
            $ref: '#/components/schemas/AudioDefinition'
            x-scope:
            - ''
            - '#/components/schemas/Media'
            - '#/components/schemas/MediaFiles'
        image:
          type: array
          items:
            $ref: '#/components/schemas/ImageDefinition'
            x-scope:
            - ''
            - '#/components/schemas/Media'
            - '#/components/schemas/MediaFiles'
        thumbnail:
          type: array
          items:
            $ref: '#/components/schemas/ImageDefinition'
            x-scope:
            - ''
            - '#/components/schemas/Media'
            - '#/components/schemas/MediaFiles'
        thumbnail_gif:
          type: array
          items:
            $ref: '#/components/schemas/ImageDefinition'
            x-scope:
            - ''
            - '#/components/schemas/Media'
            - '#/components/schemas/MediaFiles'
        ids:
          type: array
          description: If multi-stream list of ids of sub-videos
          items:
            type: integer
            nullable: false
          nullable: false
        layout:
          type: array
          description: 2-element array to define rxc layout
          items:
            type: integer
            nullable: false
          nullable: false
        quality:
          type: integer
          description: Resolution to fetch on each sub-video
          nullable: false
    MediaIdQuery:
      type: object
      properties:
        ids:
          description: Array of media IDs to retrieve.
          type: array
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
        localization_ids:
          description: Array of child localization IDs for which media should be retrieved.
          type: array
          items:
            type: integer
            minimum: 1
        state_ids:
          description: Array of child state IDs for which media should be retrieved.
          type: array
          items:
            type: integer
            minimum: 1
      nullable: false
    MediaSpec:
      type: object
      required:
      - type
      - section
      - name
      - md5
      properties:
        type:
          description: Unique integer identifying a media type. Use -1 to automatically
            select the media type if only one media type exists in a project.
          type: integer
          minimum: -1
          nullable: false
        gid:
          description: Group ID for the upload group of this media.
          type: string
          nullable: false
        uid:
          description: Unique ID for the upload of this media.
          type: string
          nullable: false
        url:
          description: Upload URL for the image if this is an image type. If not an
            image, this field is ignored.
          type: string
          nullable: false
        thumbnail_url:
          description: Upload URL for the media thumbnail if already generated.
          type: string
        thumbnail_gif_url:
          description: Upload URL for the video gif thumbnail if already generated.
          type: string
        section:
          description: Media section name.
          type: string
          nullable: false
        name:
          description: Name of the file.
          type: string
          nullable: false
        md5:
          description: MD5 sum of the media file.
          type: string
          nullable: false
        num_frames:
          type: integer
          description: Number of frames for videos.
          nullable: true
        fps:
          type: integer
          description: Frame rate for videos.
          nullable: true
        codec:
          type: string
          description: Codec for videos.
          nullable: true
        width:
          type: integer
          description: Horizontal resolution in pixels.
          nullable: true
        height:
          type: integer
          description: Vertical resolution in pixels.
          nullable: true
        attributes:
          nullable: true
          description: Attributes for the media
          type: object
      nullable: false
    MediaStats:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
        download_size:
          type: integer
          minimum: 0
        total_size:
          type: integer
          minimum: 0
        duration:
          type: number
          minimum: 0
    MediaTypeSpec:
      type: object
      required:
      - name
      - dtype
      properties:
        name:
          description: Name of the media type.
          type: string
        description:
          description: Description of the media type.
          type: string
          default: ''
        dtype:
          description: Type of the media, image or video.
          type: string
          enum:
          - image
          - video
          - multi
        file_format:
          description: File extension. If omitted, any recognized file extension for
            the given dtype is accepted for upload. Do not include a dot prefix.
          type: string
          maxLength: 4
        default_volume:
          description: Default audio volume for this media type.
          type: integer
          minimum: 0
          maximum: 100
        attribute_types:
          description: Attribute type definitions.
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
        archive_config:
          description: Archive config definitions. If null, the raw file will be uploaded
            to Tator.
          type: array
          items:
            $ref: '#/components/schemas/ArchiveConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
        streaming_config:
          description: Streaming config defintion. If null, the default will be used.
          type: array
          items:
            $ref: '#/components/schemas/ResolutionConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
        overlay_config:
          description: Overlay configuration
          type: object
          additionalProperties: true
        visible:
          description: Visible configuration
          type: boolean
    MediaTypeUpdate:
      type: object
      properties:
        name:
          description: Name of the media type.
          type: string
        description:
          description: Description of the media type.
          type: string
          default: ''
        file_format:
          description: File extension. If omitted, any recognized file extension for
            the given dtype is accepted for upload. Do not include a dot prefix.
          type: string
          maxLength: 4
        archive_config:
          description: Archive config definitions. If null, the raw file will be uploaded
            to Tator.
          type: array
          items:
            $ref: '#/components/schemas/ArchiveConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
        streaming_config:
          description: Streaming config defintion. If null, the default will be used.
          type: array
          items:
            $ref: '#/components/schemas/ResolutionConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
        visible:
          description: Visible configuration
          type: boolean
        default_volume:
          description: Default audio volume for this media type.
          type: integer
          minimum: 0
          maximum: 100
    MediaType:
      type: object
      description: Media type.
      properties:
        id:
          type: integer
          description: Unique integer identifying a media type.
        project:
          type: integer
          description: Unique integer identifying project for this media type.
        name:
          description: Name of the media type.
          type: string
        description:
          description: Description of the media type.
          type: string
          default: ''
        dtype:
          description: Type of the media, image or video.
          type: string
          enum:
          - image
          - video
          - multi
        file_format:
          description: File extension. If omitted, any recognized file extension for
            the given dtype is accepted for upload. Do not include a dot prefix.
          type: string
          maxLength: 4
        default_volume:
          description: Default audio volume for this media type.
          type: integer
          minimum: 0
          maximum: 100
        attribute_types:
          description: Attribute type definitions.
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
        archive_config:
          description: Archive config definitions. If null, the raw file will be uploaded
            to Tator.
          type: array
          items:
            $ref: '#/components/schemas/ArchiveConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
        streaming_config:
          description: Streaming config defintion. If null, the default will be used.
          type: array
          items:
            $ref: '#/components/schemas/ResolutionConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
        overlay_config:
          description: Overlay configuration
          type: object
          additionalProperties: true
        visible:
          description: Visible configuration
          type: boolean
    MembershipSpec:
      type: object
      required:
      - user
      - permission
      properties:
        user:
          description: Unique integer identifying a user.
          type: integer
          minimum: 1
        permission:
          description: User permission level for the project.
          type: string
          enum:
          - View Only
          - Can Edit
          - Can Transfer
          - Can Execute
          - Full Control
        default_version:
          description: Unique integer identifying a version.
          type: integer
          minimum: 1
    MembershipUpdate:
      type: object
      properties:
        permission:
          description: User permission level for the project.
          type: string
          enum:
          - View Only
          - Can Edit
          - Can Transfer
          - Can Execute
          - Full Control
        default_version:
          description: Unique integer identifying a version.
          type: integer
          minimum: 1
    Membership:
      type: object
      description: Membership object.
      properties:
        id:
          type: integer
          description: Unique integer identifying a membership.
        user:
          description: Unique integer identifying a user.
          type: integer
          minimum: 1
        username:
          description: Username for the membership.
          type: string
        permission:
          description: User permission level for the project.
          type: string
          enum:
          - View Only
          - Can Edit
          - Can Transfer
          - Can Execute
          - Full Control
        default_version:
          description: Unique integer identifying a version.
          type: integer
          minimum: 1
    MultiDefinition:
      description: Object containing information needed for a multi media type.
      type: object
      properties:
        ids:
          type: array
          description: If multi-stream list of ids of sub-videos
          items:
            type: integer
            nullable: false
          nullable: false
        layout:
          type: array
          description: 2-element array to define rxc layout
          items:
            type: integer
            nullable: false
          nullable: false
        quality:
          type: integer
          description: Resolution to fetch on each sub-video
          nullable: false
      nullable: false
    NotifySpec:
      type: object
      required:
      - message
      properties:
        message:
          description: Message to send to administrators.
          type: string
          nullable: false
        sendAsFile:
          description: Whether to send message as a file. (0 or 1)
          type: integer
      nullable: false
    OrganizationSpec:
      type: object
      required:
      - name
      properties:
        name:
          description: Name of the organization.
          type: string
    Organization:
      type: object
      description: Organization object.
      properties:
        id:
          type: integer
          description: Unique integer identifying the organization.
        name:
          description: Name of the organization.
          type: string
    ProjectSpec:
      type: object
      required:
      - name
      - organization
      properties:
        name:
          description: Name of the project.
          type: string
        summary:
          description: Summary of the project.
          type: string
          default: ''
        organization:
          description: Unique integer identifying an organization.
          type: integer
          minimum: 1
        enable_downloads:
          description: Whether the UI should allow downloads for this project.
          type: boolean
          default: true
    ProjectUpdate:
      type: object
      properties:
        name:
          description: Name of the project.
          type: string
        summary:
          description: Summary of the project.
          type: string
          default: ''
        thumb:
          type: string
          description: S3 key of thumbnail used to represent the project.
        enable_downloads:
          description: Whether the UI should allow downloads for this project.
          type: boolean
          default: true
    Project:
      type: object
      description: Project object.
      properties:
        id:
          type: integer
          description: Unique integer identifying the project.
        name:
          description: Name of the project.
          type: string
        summary:
          description: Summary of the project.
          type: string
          default: ''
        organization:
          description: Unique integer identifying an organization.
          type: integer
          minimum: 1
        enable_downloads:
          description: Whether the UI should allow downloads for this project.
          type: boolean
          default: true
        thumb:
          type: string
          description: S3 key of thumbnail used to represent the project.
        created:
          type: string
          description: Datetime when this project was created.
        num_files:
          type: integer
          description: Number of files in the project.
        size:
          type: integer
          description: Size of the project in bytes.
        duration:
          type: integer
          description: Total duration of all video in the project.
        usernames:
          type: array
          description: List of usernames of project members.
          items:
            type: string
        permission:
          type: string
          description: Permission level of user making request.
    ResolutionConfig:
      type: object
      description: 'Settings for streaming video encode. Any additional properties
        will be passed as command line arguments to ffmpeg. '
      additionalProperties: true
      properties:
        vcodec:
          type: string
          description: Video codec.
          enum:
          - h264
          default: h264
        crf:
          type: integer
          description: Constant rate factor.
          minimum: 0
          maximum: 51
          default: 23
        resolution:
          type: integer
          description: Vertical Resolution
          minimum: 0
          maximum: 4096
    S3StorageConfig:
      type: object
      description: Settings for AWS S3 archival storage. If not given, the archival
        video will be stored on the Tator website.
      properties:
        aws_access_key:
          type: string
          description: AWS access key.
        aws_secret_access_key:
          type: string
          description: AWS secret access key.
        bucket_name:
          type: string
          description: Name of bucket.
    SectionSpec:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Unique name of the algorithm workflow.
          nullable: false
        lucene_string:
          type: string
          description: Lucene query syntax search string.
        media_bools:
          type: array
          description: List of elasticsearch boolean queries that should be applied
            to media. These are applied to the boolean query "filter" list.
          items:
            type: object
            additionalProperties: true
        annotation_bools:
          type: array
          description: List of elasticsearch boolean queries that should be applied
            to annotations. These are applied to the boolean query "filter" list.
          items:
            type: object
            additionalProperties: true
        tator_user_sections:
          type: string
          description: Attribute that is applied to media to identify membership to
            a section.
          nullable: false
        visible:
          type: boolean
          description: Determines the visibility in the UI.
          nullable: false
      nullable: false
    SectionUpdate:
      type: object
      properties:
        name:
          type: string
          description: Unique name of the algorithm workflow.
          nullable: false
        lucene_string:
          type: string
          description: Lucene query syntax search string.
        media_bools:
          type: array
          description: List of elasticsearch boolean queries that should be applied
            to media. These are applied to the boolean query "filter" list.
          items:
            type: object
            additionalProperties: true
        annotation_bools:
          type: array
          description: List of elasticsearch boolean queries that should be applied
            to annotations. These are applied to the boolean query "filter" list.
          items:
            type: object
            additionalProperties: true
        tator_user_sections:
          type: string
          description: Attribute that is applied to media to identify membership to
            a section.
          nullable: false
        visible:
          type: boolean
          description: Determines the visibility in the UI.
          nullable: false
      nullable: false
    Section:
      type: object
      properties:
        id:
          type: integer
          description: Unique integer identifying the section.
        project:
          type: integer
          description: Unique integer identifying the project associated with the
            section.
        name:
          type: string
          description: Unique name of the algorithm workflow.
          nullable: false
        lucene_string:
          type: string
          description: Lucene query syntax search string.
        media_bools:
          type: array
          description: List of elasticsearch boolean queries that should be applied
            to media. These are applied to the boolean query "filter" list.
          items:
            type: object
            additionalProperties: true
        annotation_bools:
          type: array
          description: List of elasticsearch boolean queries that should be applied
            to annotations. These are applied to the boolean query "filter" list.
          items:
            type: object
            additionalProperties: true
        tator_user_sections:
          type: string
          description: Attribute that is applied to media to identify membership to
            a section.
          nullable: false
        visible:
          type: boolean
          description: Determines the visibility in the UI.
          nullable: false
    SectionAnalysis:
      type: object
      description: Analysis outputs.
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
        x-scope:
        - ''
        - '#/components/schemas/SectionAnalysis'
    StateSpec:
      type: object
      required:
      - media_ids
      - type
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
        x-scope:
        - ''
        - '#/components/schemas/StateSpec'
        nullable: false
      properties:
        type:
          description: Unique integer identifying a state type.
          type: integer
          nullable: false
        media_ids:
          description: List of media IDs that this state applies to.
          type: array
          items:
            type: integer
            nullable: false
          nullable: false
        localization_ids:
          description: List of localization IDs that this state applies to.
          type: array
          items:
            type: integer
            nullable: false
          nullable: false
        version:
          description: Unique integer identifying the version.
          type: integer
          nullable: false
        frame:
          description: Frame number this state applies to.
          type: integer
          nullable: false
      nullable: false
    StateUpdate:
      type: object
      properties:
        frame:
          description: Frame number this state applies to.
          type: integer
          nullable: false
        attributes:
          description: Object containing attribute values.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/StateUpdate'
            nullable: false
          nullable: false
        localization_ids_add:
          description: List of new localization IDs that this state applies to.
          type: array
          items:
            type: integer
            nullable: false
          nullable: false
        localization_ids_remove:
          description: List of new localization IDs that this state applies to.
          type: array
          items:
            type: integer
      nullable: false
    State:
      type: object
      properties:
        id:
          type: integer
          description: Unique integer identifying the state.
        meta:
          type: integer
          description: Unique integer identifying the entity type.
        media:
          description: List of media IDs that this state applies to.
          type: array
          items:
            type: integer
        localizations:
          description: List of localization IDs that this state applies to.
          type: array
          items:
            type: integer
        segments:
          description: List of contiguous frame ranges where a localization associated
            state has localization data.
          type: array
          items:
            type: array
            items:
              type: integer
              minimum: 0
            minItems: 2
            maxItems: 2
        attributes:
          description: Object containing attribute values.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/State'
        created_datetime:
          type: string
          format: date-time
          description: Datetime this state was created.
        modified_datetime:
          type: string
          format: date-time
          description: Datetime this state was last modified.
        modified_by:
          type: integer
          description: Unique integer identifying the user who last modified this
            state.
        created_by:
          type: integer
          description: Unique integer identifying the user who created this state.
        version:
          description: Unique integer identifying the version.
          type: integer
          nullable: false
        frame:
          description: Frame number this state applies to.
          type: integer
          nullable: false
    StateIdQuery:
      type: object
      properties:
        media_query:
          description: Query string used to filter media IDs. This can be used to
            avoid serialization and download of a media ID list.
          type: string
        media_ids:
          description: Array of parent media IDs for which states should be retrieved.
          type: array
          items:
            type: integer
            minimum: 1
        localization_ids:
          description: Array of child localization IDs for which states should be
            retrieved.
          type: array
          items:
            type: integer
            minimum: 1
        ids:
          description: Array of state IDs to retrieve.
          type: array
          items:
            type: integer
            minimum: 1
    StateTypeSpec:
      type: object
      required:
      - name
      - association
      - media_types
      properties:
        name:
          type: string
          description: Name of the state type.
        description:
          type: string
          description: Description of the state type.
        association:
          description: Type of object this state type is associated with.
          type: string
          enum:
          - Media
          - Frame
          - Localization
        interpolation:
          type: string
          description: Interpolation method used by the web interface.
          default: latest
          enum:
          - none
          - latest
          - attr_style_range
        visible:
          type: boolean
          description: Whether this state type should be displayed.
        grouping_default:
          type: boolean
          description: Whether to group elements in the UI by default.
          default: true
        attribute_types:
          description: Attribute type definitions.
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/StateType'
        delete_child_localizations:
          type: boolean
          description: 'True if child localizations should be deleted when this state
            is deleted. Localizations will only be deleted if they are not associated
            with another state. '
          default: false
        media_types:
          description: List of integers identifying media types that this state type
            may apply to.
          type: array
          items:
            type: integer
            minimum: 1
          minItems: 1
    StateTypeUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name of the state type.
        description:
          type: string
          description: Description of the state type.
        visible:
          type: boolean
          description: Whether this state type should be displayed.
        grouping_default:
          type: boolean
          description: Whether to group elements in the UI by default.
          default: true
        delete_child_localizations:
          type: boolean
          description: 'True if child localizations should be deleted when this state
            is deleted. Localizations will only be deleted if they are not associated
            with another state. '
          default: false
    StateType:
      type: object
      description: State type.
      properties:
        id:
          type: integer
          description: Unique integer identifying a state type.
        project:
          type: integer
          description: Unique integer identifying project for this state type.
        dtype:
          type: string
          description: String indicating data type. Always equal to "state".
        media:
          description: List of integers identifying media types that this state type
            may apply to.
          type: array
          items:
            type: integer
            minimum: 1
        name:
          type: string
          description: Name of the state type.
        description:
          type: string
          description: Description of the state type.
        association:
          description: Type of object this state type is associated with.
          type: string
          enum:
          - Media
          - Frame
          - Localization
        interpolation:
          type: string
          description: Interpolation method used by the web interface.
          default: latest
          enum:
          - none
          - latest
          - attr_style_range
        visible:
          type: boolean
          description: Whether this state type should be displayed.
        grouping_default:
          type: boolean
          description: Whether to group elements in the UI by default.
          default: true
        attribute_types:
          description: Attribute type definitions.
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/StateType'
        delete_child_localizations:
          type: boolean
          description: 'True if child localizations should be deleted when this state
            is deleted. Localizations will only be deleted if they are not associated
            with another state. '
          default: false
    StateMergeUpdate:
      type: object
      required:
      - merge_state_id
      properties:
        merge_state_id:
          description: Unique integer identifying the state whose localizations will
            merge with this state.
          type: integer
    StateTrimUpdate:
      type: object
      required:
      - frame
      - endpoint
      properties:
        frame:
          description: Frame number of new end point
          type: integer
          minimum: 0
        endpoint:
          description: End point to trim to using the provided frame number.
          type: string
          enum:
          - start
          - end
    TemporaryFileSpec:
      type: object
      required:
      - name
      - url
      - lookup
      properties:
        name:
          description: Unique name for the temporary file
          type: string
        url:
          description: URL for the temporary file
          type: string
        lookup:
          description: md5hash of lookup parameters
          type: string
        hours:
          description: Number of hours file is to be kept alive
          type: integer
          minimum: 1
          maximum: 24
          default: 24
    TemporaryFile:
      type: object
      properties:
        id:
          description: Unique integer identifying a temporary file.
          type: integer
        project:
          description: Unique integer identifying a project.
          type: integer
        user:
          description: Unique integer identifying user who created this file.
          type: integer
        path:
          description: Full URL to the temporary file.
          type: string
        created_datetime:
          description: Datetime when this temporary file was created.
          type: string
        eol_datetime:
          description: Datetime when this temporary file may be deleted.
          type: string
        name:
          description: Unique name for the temporary file
          type: string
        lookup:
          description: md5hash of lookup parameters
          type: string
    TranscodeSpec:
      type: object
      required:
      - type
      - gid
      - uid
      - url
      - section
      - name
      - md5
      properties:
        type:
          description: Unique integer identifying a video type.
          type: integer
          nullable: false
        gid:
          description: UUID generated for the job group. This value may be associated
            with messages generated during upload via the `Progress` endpoint, or
            it may be newly generated. The transcode workflow will use this value
            to generate progress messages.
          type: string
          format: uuid
          nullable: false
        uid:
          description: UUID generated for the individual job. This value may be associated
            with messages generated during upload via the `Progress` endpoint, or
            it may be newly generated. The transcode workflow will use this value
            to generate progress messages.
          type: string
          nullable: false
        url:
          description: Upload URL for the raw video.
          type: string
          nullable: false
        size:
          description: Size of the file in bytes. This parameter is required if the
            supplied URL is external (not produced by `DownloadInfo` and cannot accept
            HEAD requests.
          type: integer
          minimum: 0
        section:
          description: Media section name to upload to.
          type: string
          nullable: false
        name:
          description: Name of the file.
          type: string
          nullable: false
        md5:
          description: MD5 sum of the media file.
          type: string
          nullable: false
        attributes:
          description: Attributes to apply upon upload
          type: object
          nullable: true
        media_id:
          description: ID of an existing media. If given, this media will be used
            for the transcode operation rather than creating a new object.
          type: integer
          nullable: true
      nullable: false
    Transcode:
      type: object
      properties:
        message:
          type: string
          description: Message indicating transcode started successfully.
        uid:
          type: string
          description: UUID identifying the job.
        gid:
          type: string
          description: UUID identifying the job group.
    UploadCompletionSpec:
      type: object
      properties:
        key:
          description: An object key that can be supplied to the `Transcode` or `Media`
            endpoint after the file has been uploaded.
          type: string
          nullable: false
        upload_id:
          description: An upload ID.
          type: string
          nullable: false
        parts:
          description: List of objects containing part number for each PUT request
            and ETag header from each response.
          type: array
          items:
            $ref: '#/components/schemas/UploadPart'
            x-scope:
            - ''
            - '#/components/schemas/UploadCompletionSpec'
            nullable: false
          minItems: 2
          maxItems: 10000
          nullable: false
      nullable: false
    UploadInfo:
      type: object
      properties:
        urls:
          description: One or more URLs for upload via one PUT request per URL.
          type: array
          items:
            type: string
          minItems: 1
        key:
          description: An object key that can be supplied to the `Transcode` or `Media`
            endpoint after the file has been uploaded.
          type: string
        upload_id:
          description: An upload ID that can be supplied to the `UploadCompletion`
            endpoint after the file has been uploaded. Only contains a value if `num_parts`
            > 1.
          type: string
    UploadPart:
      type: object
      properties:
        ETag:
          description: 'Content of ETag header returned from PUT request for an upload
            part. NOTE: key is case-sensitive!'
          type: string
          nullable: false
        PartNumber:
          description: 'Part number for the given ETag response header. NOTE: key
            is case-sensitive!'
          type: integer
          nullable: false
      nullable: false
    UserUpdate:
      type: object
      properties:
        first_name:
          type: string
          description: First name of user.
        last_name:
          type: string
          description: Last name of user.
        email:
          type: string
          description: Email address of user.
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique integer identifying a user.
        username:
          type: string
          description: Username of user.
        first_name:
          type: string
          description: First name of user.
        last_name:
          type: string
          description: Last name of user.
        email:
          type: string
          description: Email address of user.
    VersionSpec:
      type: object
      required:
      - name
      properties:
        name:
          description: Name of the version.
          type: string
        description:
          description: Description of the version.
          type: string
          default: ''
        show_empty:
          type: boolean
          description: Whether to show this version on media for which no annotations
            exist.
          default: true
        bases:
          type: array
          description: Array of other version IDs that are dependencies of this version.
          items:
            type: integer
          minimum: 0
    VersionUpdate:
      type: object
      properties:
        name:
          description: Name of the version.
          type: string
        description:
          description: Description of the version.
          type: string
          default: ''
        show_empty:
          type: boolean
          description: Whether to show this version on media for which no annotations
            exist.
          default: true
        bases:
          type: array
          description: Array of other version IDs that are dependencies of this version.
          items:
            type: integer
          minimum: 0
    Version:
      type: object
      description: Version object.
      properties:
        id:
          type: integer
          description: Unique integer identifying a membership.
        name:
          description: Name of the version.
          type: string
        description:
          description: Description of the version.
          type: string
          default: ''
        show_empty:
          type: boolean
          description: Whether to show this version on media for which no annotations
            exist.
          default: true
        bases:
          type: array
          description: Array of other version IDs that are dependencies of this version.
          items:
            type: integer
          minimum: 0
        number:
          type: integer
          description: Version number.
        project:
          type: integer
          description: Unique integer identifying a project.
        created_by:
          type: string
          description: Name of user who created the last unmodified annotation in
            this version.
    VideoDefinition:
      type: object
      required:
      - path
      - codec
      - resolution
      properties:
        path:
          type: string
          description: Relative URL to the file.
          nullable: false
        size:
          type: integer
          description: File size in bytes.
          nullable: false
        bit_rate:
          type: integer
          description: Bit rate in bits per second
          nullable: false
        codec:
          description: Human readable codec.
          type: string
          nullable: false
        resolution:
          description: Resolution of the video in pixels (height, width).
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: integer
            minimum: 1
            nullable: false
          nullable: false
        segment_info:
          description: Path to json file containing segment info. Required if media
            role is `streaming`.
          type: string
          nullable: false
        host:
          description: If supplied will use this instead of currently connected host,
            e.g. https://example.com
          type: string
        http_auth:
          description: If specified will be used for HTTP authorization in request
            for media, i.e. "bearer <token>".
          type: string
        codec_mime:
          description: 'Example mime: "video/mp4; codecs="avc1.64001e"". Only relevant
            for streaming files, will assume example above if not present.'
          type: string
        codec_description:
          description: Description other than codec.
          type: string
          nullable: false
      nullable: false
    VideoClip:
      type: object
      properties:
        segment_start_frames:
          description: List of start frames of segments that form the clip. Index
            associated with segment_end_frames.
          type: array
          items:
            type: integer
        segment_end_frames:
          description: List of end frames of segments that form the clip. Index associated
            with segment_start_frames.
          type: array
          items:
            type: integer
        file:
          $ref: '#/components/schemas/TemporaryFile'
          x-scope:
          - ''
          - '#/components/schemas/VideoClip'
    AttributeBulkUpdate:
      type: object
      required:
      - attributes
      properties:
        attributes:
          description: Attribute values to bulk update an entity list.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/AttributeBulkUpdate'
            nullable: false
          nullable: false
        ids:
          description: Specific IDs to update. This is applied in addition to query
            parameters.
          type: array
          items:
            type: integer
      nullable: false
    RgbColor:
      description: RGB three element array with values 0-255.
      type: array
      items:
        type: integer
        minimum: 0
        maximum: 255
      minItems: 3
      maxItems: 3
    RgbaColor:
      description: RGBA four element array with values 0-255.
      type: array
      items:
        type: integer
        minimum: 0
        maximum: 255
      minItems: 4
      maxItems: 4
    HexColor:
      description: 'Hex color string, such as #00FF00.'
      type: string
      pattern: ^#(?:[0-9a-fA-F]{3}){1,2}$
      minLength: 7
      maxLength: 7
    Color:
      description: RGB array, RGBA array, or hex string.
      oneOf:
      - $ref: '#/components/schemas/RgbColor'
        x-scope:
        - ''
        - '#/components/schemas/LocalizationType'
        - '#/components/schemas/ColorMap'
        - '#/components/schemas/Color'
      - $ref: '#/components/schemas/RgbaColor'
        x-scope:
        - ''
        - '#/components/schemas/LocalizationType'
        - '#/components/schemas/ColorMap'
        - '#/components/schemas/Color'
      - $ref: '#/components/schemas/HexColor'
        x-scope:
        - ''
        - '#/components/schemas/LocalizationType'
        - '#/components/schemas/ColorMap'
        - '#/components/schemas/Color'
    Fill:
      type: object
      description: Maps an attribute value or version to a color/alpha. Use `key`
        and `map` (optionally `alpha_ranges`) to map an attribute value to colors.
        Use `version` to map version IDs to colors.
      properties:
        color:
          $ref: '#/components/schemas/Color'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
          - '#/components/schemas/ColorMap'
          - '#/components/schemas/Fill'
        style:
          description: Type of fill effect
          type: string
          enum:
          - fill
          - blur
          - gray
    AlphaRange:
      description: Three element array containing start attribute value, stop attribute
        value, and alpha level 0-255 for the localizations with attribute value falling
        in this range.
      type: array
      items:
        type: number
      minLength: 3
      maxLength: 3
    ColorMap:
      type: object
      description: Maps an attribute value or version to a color/alpha. Use `key`
        and `map` (optionally `alpha_ranges`) to map an attribute value to colors.
        Use `version` to map version IDs to colors.
      properties:
        default:
          $ref: '#/components/schemas/Color'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
          - '#/components/schemas/ColorMap'
        defaultFill:
          $ref: '#/components/schemas/Fill'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
          - '#/components/schemas/ColorMap'
        key:
          type: string
          description: Attribute name.
        map:
          type: object
          description: Map of attribute values to colors.
          additionalProperties:
            $ref: '#/components/schemas/Color'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
            - '#/components/schemas/ColorMap'
        fillMap:
          type: object
          description: Map of attribute values to fill types.
          additionalProperties:
            $ref: '#/components/schemas/Fill'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
            - '#/components/schemas/ColorMap'
        alpha_ranges:
          type: object
          description: Map of attribute values to alpha level.
          additionalProperties:
            $ref: '#/components/schemas/AlphaRange'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
            - '#/components/schemas/ColorMap'
        version:
          type: object
          description: Map of version IDs to colors.
          additionalProperties:
            $ref: '#/components/schemas/Color'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
            - '#/components/schemas/ColorMap'
    CreateResponse:
      type: object
      properties:
        message:
          type: string
          description: Message indicating successful creation.
        id:
          type: integer
          description: Unique integer identifying the created object.
    CreateListResponse:
      type: object
      properties:
        message:
          type: string
          description: Message indicating successful creation.
        id:
          type: array
          description: List of unique integers identifying created objects.
          items:
            type: integer
    MessageResponse:
      type: object
      properties:
        message:
          type: string
          description: Message explaining response.
    NotFoundResponse:
      type: object
      properties:
        message:
          type: string
          description: Message explaining not found error.
    BadRequestResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message for bad request.
        details:
          type: string
          description: Detailed error message for bad request.
    Credentials:
      type: object
      required:
      - username
      - password
      properties:
        username:
          description: Account username.
          type: string
        password:
          description: Account password.
          type: string
    Token:
      type: object
      properties:
        token:
          description: API token.
          type: string
  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization
security:
- TokenAuth: []
